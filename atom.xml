<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liquid&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-07-12T03:24:34.714Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Liquid</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>暑期集训——启发式搜索</title>
    <link href="http://example.com/2021/07/12/%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD%E2%80%94%E2%80%94%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/"/>
    <id>http://example.com/2021/07/12/%E6%9A%91%E6%9C%9F%E9%9B%86%E8%AE%AD%E2%80%94%E2%80%94%E5%90%AF%E5%8F%91%E5%BC%8F%E6%90%9C%E7%B4%A2/</id>
    <published>2021-07-12T02:48:52.000Z</published>
    <updated>2021-07-12T03:24:34.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>​ 不同于广度优先搜索和深度优先搜索的<strong>盲目搜索</strong>，启发式搜索是在这二者的基础上的一个，<strong>有一个既定大致方向</strong>的搜索，能够更快地遭到目标。</p><p>​ 所以关键在于，这个大致的方向是怎么找到的，也就是，如何在搜索的同时根据搜索到的结果不断优化自己的搜索方向。</p><h2 id="练习题">练习题</h2><h3 id="蒜头君分玩具">1. 蒜头君分玩具</h3><h4 id="题目">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210712105431378.png" alt="image-20210712105431378"><figcaption aria-hidden="true">image-20210712105431378</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210712105444096.png" alt="image-20210712105444096"><figcaption aria-hidden="true">image-20210712105444096</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210712105505292.png" alt="image-20210712105505292"><figcaption aria-hidden="true">image-20210712105505292</figcaption></figure><h4 id="思路">思路</h4><p>其实就是一个<strong>偶图的匹配</strong>问题，在<strong>邻接矩阵</strong>的实现重与<strong>n皇后</strong>类似。在每一行重选取一个值，并且每一列不能重复，使最后选取的值的和最大。</p><p>如果直接用<strong>DFS</strong>也是可以做的，但是会超时，所以要对其进行剪枝。剪枝的方法也透露了启发式搜索的思想。</p><p>这里用的剪枝方法，是用一个数组，<strong>在第<code>n</code>个位置储存前<code>n</code>行每一行的最大值的和</strong>。如果已有的<code>sum</code>加上后面行数的最大值之和依然小于已有的<code>ans</code>，则不再继续向下搜索。</p><h4 id="代码">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> Mat[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> dist[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;Mat[i][j]);</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(Mat[i][j] &gt; tmp)</span><br><span class="line">                tmp = Mat[i][j];</span><br><span class="line">        dist[i] = dist[i<span class="number">-1</span>] + tmp;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ans &lt; sum &amp;&amp; i == (n+<span class="number">1</span>))&#123;</span><br><span class="line">        ans = sum;</span><br><span class="line">        <span class="comment">// printf(&quot;%d\n&quot;,ans);</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans &gt; sum + dist[n] - dist[i<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visit[j]==<span class="number">0</span>)&#123;</span><br><span class="line">            visit[j]=<span class="number">1</span>;</span><br><span class="line">            DFS(i+<span class="number">1</span>,sum+Mat[i][j]);</span><br><span class="line">            visit[j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    build();</span><br><span class="line">    DFS(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="betsy的旅行">2. Betsy的旅行</h3><h4 id="题目-1">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210712110226217.png" alt="image-20210712110226217"><figcaption aria-hidden="true">image-20210712110226217</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210712110243446.png" alt="image-20210712110243446"><figcaption aria-hidden="true">image-20210712110243446</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210712110254953.png" alt="image-20210712110254953"><figcaption aria-hidden="true">image-20210712110254953</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210712110304010.png" alt="image-20210712110304010"><figcaption aria-hidden="true">image-20210712110304010</figcaption></figure><h4 id="思路-1">思路</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210712112343133.png" alt="image-20210712112343133"><figcaption aria-hidden="true">image-20210712112343133</figcaption></figure><h4 id="代码-1">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,cnt,ans;</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;=<span class="number">1</span> &amp;&amp; x&lt;=n &amp;&amp; y&gt;=<span class="number">1</span> &amp;&amp; y&lt;=n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == n &amp;&amp; y == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt == n * n)</span><br><span class="line">            ans++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    visit[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> dir = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> ex = x + dx[i];</span><br><span class="line">        <span class="keyword">int</span> ey = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span> (in(ex, ey) &amp;&amp; !visit[ex][ey]) &#123;</span><br><span class="line">            <span class="built_in">map</span>[ex][ey]--;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">map</span>[ex][ey] == <span class="number">1</span>) &#123;</span><br><span class="line">                dir = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dir != <span class="number">-1</span> &amp;&amp; dir != i) </span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> tx = x + dx[i];</span><br><span class="line">        <span class="keyword">int</span> ty = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span> (in(tx, ty) &amp;&amp; !visit[tx][ty]) &#123;</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> ex = tx + dx[j];</span><br><span class="line">                <span class="keyword">int</span> ey = ty + dy[j];</span><br><span class="line">                <span class="keyword">if</span> (in(ex, ey) &amp;&amp; !visit[ex][ey]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">map</span>[ex][ey] &lt; <span class="number">2</span>) &#123; <span class="comment">//保证有2个，一进一出</span></span><br><span class="line">                        flag = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                DFS(tx, ty, cnt + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    visit[x][y] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> tx = x + dx[i];</span><br><span class="line">        <span class="keyword">int</span> ty = y + dy[i];</span><br><span class="line">        <span class="keyword">if</span> (in(tx, ty) &amp;&amp; !visit[tx][ty]) &#123;</span><br><span class="line">            <span class="built_in">map</span>[tx][ty]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">                    <span class="keyword">int</span> tx = i + dx[k];</span><br><span class="line">                    <span class="keyword">int</span> ty = j + dy[k];</span><br><span class="line">                    <span class="keyword">if</span> (in(tx, ty))</span><br><span class="line">                        <span class="built_in">map</span>[i][j]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>[n][<span class="number">1</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    build();</span><br><span class="line">    DFS(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;​ 不同于广度优先搜索和深度优先搜索的&lt;strong&gt;盲目搜索&lt;/strong&gt;，启发式搜索是在这二者的基础上的一个，&lt;strong&gt;有一个既定大致方向&lt;/strong&gt;的搜索，能够更快地遭到目标。&lt;/p&gt;
&lt;p&gt;​ 所以关键在于</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="实训" scheme="http://example.com/tags/%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>暑期实训——最短路</title>
    <link href="http://example.com/2021/07/09/%E6%9A%91%E6%9C%9F%E5%AE%9E%E8%AE%AD%E2%80%94%E2%80%94%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    <id>http://example.com/2021/07/09/%E6%9A%91%E6%9C%9F%E5%AE%9E%E8%AE%AD%E2%80%94%E2%80%94%E6%9C%80%E7%9F%AD%E8%B7%AF/</id>
    <published>2021-07-09T11:55:49.000Z</published>
    <updated>2021-07-10T02:34:49.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>​ 会用到三种算法，即<strong>Floyd</strong>、<strong>Dijkstra</strong>、<strong>Spfa</strong></p><h2 id="算法框架">算法框架</h2><p><strong>Floyd</strong></p><p>最后可以得到每两点之间的最短距离。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="keyword">if</span>(Mat[i][j]&gt;Mat[i][k]+Mat[k][j])</span><br><span class="line">                    Mat[i][j]=Mat[i][k]+Mat[k][j];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Mat[<span class="number">1</span>][n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Dijkstra</strong></p><p>可以得到一个点到其他每个点的最短距离。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dist1[MAXN];</span><br><span class="line">    <span class="keyword">int</span> S[MAXN];  </span><br><span class="line">    <span class="built_in">memset</span>(dist1,<span class="number">0</span>,<span class="keyword">sizeof</span>(dist1));</span><br><span class="line">    <span class="built_in">memset</span>(S,<span class="number">0</span>,<span class="keyword">sizeof</span>(S));</span><br><span class="line">    <span class="keyword">int</span> Mindis,u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        dist1[i]=Mat[<span class="number">1</span>][i];</span><br><span class="line">        <span class="keyword">if</span>(Mat[v][i] &lt; INF)</span><br><span class="line">            path[i] = v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            path[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    S[v]=<span class="number">1</span>; path[v]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123; <span class="comment">// 单纯循环n-1次，遍历所有的点</span></span><br><span class="line">        Mindis = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(S[j]==<span class="number">0</span> &amp;&amp; dist1[j] &lt; Mindis) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                Mindis = dist1[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        S[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(S[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Mat[u][j] &lt; INF &amp;&amp; dist1[u] + Mat[u][j] &lt; dist1[j])&#123;</span><br><span class="line">                    dist1[j] = dist1[u] + Mat[u][j];</span><br><span class="line">                    path[j] = u;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Spfa</strong></p><p>可以得到一个点到其他每个点的最短距离，但是比Dijkstra更快。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p, t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    dist[i] = INF;</span><br><span class="line">    dist[v] = <span class="number">0</span>;</span><br><span class="line">    visit[v] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">queue</span>[++rear] = v;</span><br><span class="line">    <span class="keyword">while</span> (front &lt; rear) &#123;</span><br><span class="line">        p = Q[++front];</span><br><span class="line">        visit[p] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;    <span class="comment">//更新dist</span></span><br><span class="line">            <span class="keyword">if</span> (dist[p]+<span class="built_in">map</span>[p][i] &lt; dist[i]) &#123;</span><br><span class="line">                dist[i] = dist[p]+<span class="built_in">map</span>[p][i];</span><br><span class="line">                <span class="keyword">if</span> (!visit[i]) &#123;    <span class="comment">// 是否在队列中</span></span><br><span class="line">                    <span class="built_in">queue</span>[++rear] = i;</span><br><span class="line">                    visit[i] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习题">练习题</h2><h3 id="最短路">1. 最短路</h3><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709200232765.png" alt="image-20210709200232765"><figcaption aria-hidden="true">image-20210709200232765</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709200244655.png" alt="image-20210709200244655"><figcaption aria-hidden="true">image-20210709200244655</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709200303523.png" alt="image-20210709200303523"><figcaption aria-hidden="true">image-20210709200303523</figcaption></figure><h4 id="思路">思路</h4><p>Floyd算法</p><h4 id="代码">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 105</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Mat[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Mat,<span class="number">0</span>,<span class="keyword">sizeof</span>(Mat));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        Mat[a][b]=c; Mat[b][a]=c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(!Mat[i][j] &amp;&amp; i!=j)</span><br><span class="line">                Mat[i][j]=<span class="number">100000000</span>;</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line">    <span class="comment">//     for(int j=1;j&lt;=n;j++)</span></span><br><span class="line">    <span class="comment">//         printf(&quot;%d &quot;,Mat[i][j]);</span></span><br><span class="line">    <span class="comment">//     printf(&quot;\n&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// printf(&quot;============\n&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="keyword">if</span>(Mat[i][j]&gt;Mat[i][k]+Mat[k][j])</span><br><span class="line">                    Mat[i][j]=Mat[i][k]+Mat[k][j];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Mat[<span class="number">1</span>][n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(n!=<span class="number">0</span> || m!=<span class="number">0</span>)&#123;</span><br><span class="line">        build();</span><br><span class="line">        Floyd();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="骑车比赛">2. 骑车比赛</h3><h4 id="题目">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709200800885.png" alt="image-20210709200800885"><figcaption aria-hidden="true">image-20210709200800885</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709200814918.png" alt="image-20210709200814918"><figcaption aria-hidden="true">image-20210709200814918</figcaption></figure><h4 id="思路-1">思路</h4><p>同上</p><h4 id="代码-1">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Mat[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Mat,<span class="number">0</span>,<span class="keyword">sizeof</span>(Mat));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        Mat[a][b]=c; Mat[b][a]=c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(!Mat[i][j] &amp;&amp; i!=j)</span><br><span class="line">                Mat[i][j]=<span class="number">100000000</span>;</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line">    <span class="comment">//     for(int j=1;j&lt;=n;j++)</span></span><br><span class="line">    <span class="comment">//         printf(&quot;%d &quot;,Mat[i][j]);</span></span><br><span class="line">    <span class="comment">//     printf(&quot;\n&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// printf(&quot;============\n&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="keyword">if</span>(Mat[i][j]&gt;Mat[i][k]+Mat[k][j])</span><br><span class="line">                    Mat[i][j]=Mat[i][k]+Mat[k][j];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Mat[<span class="number">1</span>][n]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    build();</span><br><span class="line">    Floyd();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时光机">3. 时光机</h3><h4 id="题目-1">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709200937417.png" alt="image-20210709200937417"><figcaption aria-hidden="true">image-20210709200937417</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709200956868.png" alt="image-20210709200956868"><figcaption aria-hidden="true">image-20210709200956868</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709201011291.png" alt="image-20210709201011291"><figcaption aria-hidden="true">image-20210709201011291</figcaption></figure><h4 id="思路-2">思路</h4><p>其实就是判断图中是否有<strong>负权环</strong>。</p><p>同样是<strong>Floyd算法</strong>，算完之后得到了距离矩阵，然后又可以以此判断图中是否存在负权环（a到b的最短路加上b到a的权即为回路的长度）。</p><p>这道题同样可以用<strong>Spfa算法</strong>来实现，因为如果存在负权环，Spfa算法就不会停止，只要他的循环次数大于点数，就代表有负权环。</p><h4 id="代码-2">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Mat[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Mat,<span class="number">0</span>,<span class="keyword">sizeof</span>(Mat));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        <span class="keyword">if</span>(Mat[a][b]!=<span class="number">0</span> &amp;&amp; Mat[a][b]&gt;c || Mat[a][b]==<span class="number">0</span>)</span><br><span class="line">            Mat[a][b]=c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(Mat[i][j]==<span class="number">0</span> &amp;&amp; i!=j)</span><br><span class="line">                Mat[i][j]=INF;</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line">    <span class="comment">//     for(int j=1;j&lt;=n;j++)</span></span><br><span class="line">    <span class="comment">//         printf(&quot;%d &quot;,Mat[i][j]);</span></span><br><span class="line">    <span class="comment">//     printf(&quot;\n&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// printf(&quot;============\n&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Mincycle</span><span class="params">(<span class="keyword">int</span> A[MAXN][MAXN])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, min = INF;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(i!=j&amp;&amp;Mat[j][i]&lt;INF)</span><br><span class="line">                <span class="keyword">if</span>(A[i][j]+Mat[j][i]&lt;INF)</span><br><span class="line">                    min=A[i][j]+Mat[j][i];</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> A[MAXN][MAXN];</span><br><span class="line">    <span class="keyword">int</span> i, j, k, min;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            A[i][j] = Mat[i][j];</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="keyword">if</span>(A[i][j]&gt;A[i][k]+A[k][j])</span><br><span class="line">                    A[i][j] = A[i][k]+A[k][j];</span><br><span class="line">    min = Mincycle(A);</span><br><span class="line">    <span class="keyword">if</span>(min &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    build();</span><br><span class="line">    Floyd();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="美好的邂逅">4. 美好的邂逅</h3><h4 id="题干">题干</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709201721888.png" alt="image-20210709201721888"><figcaption aria-hidden="true">image-20210709201721888</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709201810160.png" alt="image-20210709201810160"><figcaption aria-hidden="true">image-20210709201810160</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709201952256.png" alt="image-20210709201952256"><figcaption aria-hidden="true">image-20210709201952256</figcaption></figure><h4 id="思路-3">思路</h4><p>深度搜索，看看一次搜索之后能不能访问到所有人。</p><h4 id="代码-3">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 105</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Mat[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> visit[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        Mat[a][b]=<span class="number">1</span>; Mat[b][a]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line">    <span class="comment">//     for(int j=1;j&lt;=n;j++)</span></span><br><span class="line">    <span class="comment">//         printf(&quot;%d &quot;,Mat[i][j]);</span></span><br><span class="line">    <span class="comment">//     printf(&quot;\n&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// printf(&quot;============\n&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visit[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(i == n)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">1</span>;a&lt;=n;a++)</span><br><span class="line">        <span class="keyword">if</span>(visit[a] == <span class="number">0</span> &amp;&amp; Mat[i][a]==<span class="number">1</span>)</span><br><span class="line">            DFS(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    build();</span><br><span class="line">    DFS(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(visit[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迷阵突围">5. 迷阵突围</h3><h4 id="题目-2">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210710100409418.png" alt="image-20210710100409418"><figcaption aria-hidden="true">image-20210710100409418</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210710100422167.png" alt="image-20210710100422167"><figcaption aria-hidden="true">image-20210710100422167</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210710100435865.png" alt="image-20210710100435865"><figcaption aria-hidden="true">image-20210710100435865</figcaption></figure><h4 id="思路-4">思路</h4><p>运用<strong>Dijkstra</strong>找到最短路和最短路径，<strong>依次删除最短路径中的边</strong>，对于删除边后的图，再求最短路和最短路径，每次删除一条边之后就求一次，求完之后把图复原，再删除下一条边，在删除这些边后得到的最短路中选择最小值，即是次短路。</p><p>注意在输出的时候，用<strong>%lf</strong>而不是<strong>%g</strong>。</p><p>这题还可以用**启发式搜索A*算法 **来实现。</p><h4 id="代码-4">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 205</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 32767</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">Point</span>[<span class="title">MAXN</span>];</span></span><br><span class="line"><span class="keyword">double</span> Mat[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> n,m,d;</span><br><span class="line"><span class="keyword">int</span> path[MAXN],apath[MAXN];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">(struct node a,struct node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x=((<span class="keyword">double</span>)a.x-b.x)*((<span class="keyword">double</span>)a.x-b.x);</span><br><span class="line">    <span class="keyword">double</span> y=((<span class="keyword">double</span>)a.y-b.y)*((<span class="keyword">double</span>)a.y-b.y);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(x+y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;Point[i+<span class="number">1</span>].x,&amp;Point[i+<span class="number">1</span>].y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        Mat[a][b]=Mat[b][a]=length(Point[a],Point[b]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(Mat[i][j]==<span class="number">0</span> &amp;&amp; i!=j)</span><br><span class="line">                Mat[i][j]=INF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dist1[MAXN];</span><br><span class="line">    <span class="keyword">int</span> S[MAXN];  </span><br><span class="line">    <span class="built_in">memset</span>(dist1,<span class="number">0</span>,<span class="keyword">sizeof</span>(dist1));</span><br><span class="line">    <span class="built_in">memset</span>(S,<span class="number">0</span>,<span class="keyword">sizeof</span>(S));</span><br><span class="line">    <span class="keyword">int</span> Mindis,u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        dist1[i]=Mat[<span class="number">1</span>][i];</span><br><span class="line">        <span class="keyword">if</span>(Mat[v][i] &lt; INF)</span><br><span class="line">            path[i] = v;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            path[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    S[v]=<span class="number">1</span>; path[v]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123; <span class="comment">// 单纯循环n-1次，遍历所有的点</span></span><br><span class="line">        Mindis = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(S[j]==<span class="number">0</span> &amp;&amp; dist1[j] &lt; Mindis) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                Mindis = dist1[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        S[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(S[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Mat[u][j] &lt; INF &amp;&amp; dist1[u] + Mat[u][j] &lt; dist1[j])&#123;</span><br><span class="line">                    dist1[j] = dist1[u] + Mat[u][j];</span><br><span class="line">                    path[j] = u;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist1[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dijkstra1</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dist1[MAXN];</span><br><span class="line">    <span class="keyword">int</span> S[MAXN];  </span><br><span class="line">    <span class="built_in">memset</span>(dist1,<span class="number">0</span>,<span class="keyword">sizeof</span>(dist1));</span><br><span class="line">    <span class="built_in">memset</span>(S,<span class="number">0</span>,<span class="keyword">sizeof</span>(S));</span><br><span class="line">    <span class="keyword">int</span> Mindis,u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        dist1[i]=Mat[<span class="number">1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">    S[v]=<span class="number">1</span>; path[v]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123; <span class="comment">// 单纯循环n-1次，遍历所有的点</span></span><br><span class="line">        Mindis = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(S[j]==<span class="number">0</span> &amp;&amp; dist1[j] &lt; Mindis) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                Mindis = dist1[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        S[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(S[j]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Mat[u][j] &lt; INF &amp;&amp; dist1[u] + Mat[u][j] &lt; dist1[j])&#123;</span><br><span class="line">                    dist1[j] = dist1[u] + Mat[u][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist1[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getPath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=n;</span><br><span class="line">    <span class="keyword">while</span>(k!=<span class="number">1</span>)&#123;</span><br><span class="line">        apath[d++] = k;</span><br><span class="line">        k = path[k];</span><br><span class="line">    &#125;</span><br><span class="line">    apath[d] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    build();</span><br><span class="line">    <span class="keyword">double</span> min1 = Dijkstra(<span class="number">1</span>), min2 = INF;</span><br><span class="line">    getPath();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = apath[i], b = apath[i+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">double</span> tmp = Mat[a][b];</span><br><span class="line">        Mat[a][b] = Mat[b][a] = INF;</span><br><span class="line">        <span class="keyword">if</span>(min2 &gt; Dijkstra1(<span class="number">1</span>))</span><br><span class="line">            min2 = Dijkstra1(<span class="number">1</span>);</span><br><span class="line">        Mat[a][b] = Mat[b][a] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(min2 == INF)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,min2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;​ 会用到三种算法，即&lt;strong&gt;Floyd&lt;/strong&gt;、&lt;strong&gt;Dijkstra&lt;/strong&gt;、&lt;strong&gt;Spfa&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;算法框架&quot;&gt;算法框架&lt;/h2&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="实训" scheme="http://example.com/tags/%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>暑期实训————搜索进阶</title>
    <link href="http://example.com/2021/07/09/%E6%9A%91%E6%9C%9F%E5%AE%9E%E8%AE%AD%E2%80%94%E2%80%94%E6%90%9C%E7%B4%A2%E8%BF%9B%E9%98%B6/"/>
    <id>http://example.com/2021/07/09/%E6%9A%91%E6%9C%9F%E5%AE%9E%E8%AE%AD%E2%80%94%E2%80%94%E6%90%9C%E7%B4%A2%E8%BF%9B%E9%98%B6/</id>
    <published>2021-07-09T03:08:49.000Z</published>
    <updated>2021-07-09T03:56:40.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>不像之前会指定广度搜索或深度搜索，这次需要根据题目要求自己判断选取。</p><p>其实图的题归根到底都可以看作是树，那么只需要考虑所需要的是一次到底的<strong>深度遍历</strong>，还是一层一层的<strong>层次遍历</strong>。</p><p>进一步，其实就是站在每一个结点上，想一想真正重要的是根据这个结点所具有的操作属性向下走，得到一个与特定结点属性相关（如值的累加）的答案，还是专注于结点本身的值的改变，找到目标节点或者层次。如果是前者，那么深度搜索会更好，如果是后者，如果不要求最短的话，其实深度搜索和广度搜索都可以，如果要求最短的话，就是广度搜索。</p><h2 id="练习题">练习题</h2><h3 id="超级书架2">1. 超级书架2</h3><h4 id="题目">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709111111388.png" alt="image-20210709111111388"><figcaption aria-hidden="true">image-20210709111111388</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709111125867.png" alt="image-20210709111125867"><figcaption aria-hidden="true">image-20210709111125867</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709111136946.png" alt="image-20210709111136946"><figcaption aria-hidden="true">image-20210709111136946</figcaption></figure><h4 id="思路">思路</h4><p>用的是深度搜索的框架，其实如果把所有情况的组合看作是一棵<strong>生成树</strong>的话，再每一个节点上其实都有两种选择，就是<strong>选与不选</strong>，进而向下分叉，效果表现在高度和值<code>sum</code>上。</p><p>所以递归终止条件是<code>i == n</code>，再遍历整棵树的过程中储存满足条件的最小<code>ans</code>值。</p><h4 id="代码">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">20000000</span>;</span><br><span class="line"><span class="keyword">int</span> n,b,sum;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sum&gt;=b &amp;&amp; sum &lt; ans)</span><br><span class="line">        ans=sum;</span><br><span class="line">    <span class="keyword">if</span>(i == n)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    DFS(i+<span class="number">1</span>,sum+arr[i]);</span><br><span class="line">    DFS(i+<span class="number">1</span>,sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line">    DFS(<span class="number">0</span>,sum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans-b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正方形">2. 正方形</h3><h4 id="题目-1">题目</h4><p><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709111801187.png"></p><p><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709111816730.png"></p><h4 id="思路-1">思路</h4><p>和上一题是同样的思路，依然是一个<strong>选与不选</strong>的问题，但是这题用了一个不同的框架。</p><p>上一题直接用了一个与<strong>二叉树遍历</strong>及其相似的遍历方式，用了两个<code>DFS</code>的递归实现。这一题只用了一次递归，但是多了<code>visit[]</code>数组的辅助记录，这样复杂度会低一些，因为<strong>使用访问数组判断的时候本身就是一个剪枝过程</strong>。</p><p>并且这道题还使用了更多的<strong>剪枝操作</strong>。比如在读取到<code>s</code>也就是总长度时，就进行是否可行的判断，在<code>DFS</code>函数中，也有专门的标记变量<code>flag</code>，如果已经找到了三条边，第四条边自然是可行的，就不用再找，一路返回即可。</p><p>这里对于四条边的寻找方式也比较有意思，最初的想法是循环四遍找到四条边，过程中用访问数组辅助。其实也是可行的。但这里的方法是直接用一次递归实现，然后在递归函数的形参中记录已找到边的条数。</p><h4 id="代码-1">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,len,flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">25</span>],visit[<span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> sum,<span class="keyword">int</span> time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(time==<span class="number">3</span>)&#123;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum==len)&#123;</span><br><span class="line">        DFS(<span class="number">0</span>,<span class="number">0</span>,time+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!visit[j])&#123;</span><br><span class="line">            visit[j]=<span class="number">1</span>;</span><br><span class="line">            DFS(j+<span class="number">1</span>,sum+arr[j],time);</span><br><span class="line">            visit[j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line">        s+=arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s%<span class="number">4</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    len=s/<span class="number">4</span>;</span><br><span class="line">    DFS(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蒜头君回家">3. 蒜头君回家</h3><h4 id="题目-2">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709112906975.png" alt="image-20210709112906975"><figcaption aria-hidden="true">image-20210709112906975</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709112919462.png" alt="image-20210709112919462"><figcaption aria-hidden="true">image-20210709112919462</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709112932893.png" alt="image-20210709112932893"><figcaption aria-hidden="true">image-20210709112932893</figcaption></figure><h4 id="思路-2">思路</h4><p>操作上就是最简单的<strong>迷宫操作</strong>。</p><p>但是问题在于，题目要求先找到钥匙，才能到家，而如果采取先找钥匙再从钥匙的位置找家的思路，理论上是可行的，但是随着钥匙数量的增加，复杂度会越来越高，最后爆掉。</p><p>稍微优化一点的做法是，从钥匙出发，同时双线找人和家，然后相加取最小。但是同样的道理，也会爆。</p><p>所以，能不能找到一个，复杂度和钥匙数目无关的算法呢。其实前两个算法会爆的原因在于，对于每一个钥匙，都要单独的几乎广度搜索整个地图，于是钥匙越多复杂度越高，但是如果对于所有的钥匙，都只用广度搜索一次地图，就能避免这种情况了。</p><p>所以这里的做法是，<strong>给访问数组<code>visit[][]</code>多加一维变成<code>visit[][][]</code></strong>，第三维有两个状态，找到了钥匙时候的访问和没找到钥匙时候的访问，找到钥匙时候的访问记录在<code>visit[][][1]</code>中，没有找到的记录在<code>visit[][][0]</code>中。</p><p>由于广度搜索的进队特性，每一个当前的状态都取决于上一个出队的点，所以有些点可能找到了钥匙，而有些没有，所以在每一个点的内部都应该有一个标准变量<code>flag</code>来记录这种状态，找到了就是<code>1</code>没找到就是<code>0</code>。最终成功到家的条件就是，找到了家，并且当前点的状态是找到了钥匙。</p><p>这个方法的优势在于，把所有找钥匙的行为都同时进行了，我在向外扩散搜索的时候，可能有点的先找到了钥匙，那么对于这个找到了钥匙的点，之前访问过的点又变得可以访问了，于是他会从那个找到钥匙的点开始向四周扩散去找家；而对于还没有找到钥匙的点，就继续向外扩散直到找到钥匙。<strong>多线程同时进行</strong>，只用广度搜索一遍地图，自然就不会超时了。</p><h4 id="代码-2">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">n</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">Node <span class="built_in">queue</span>[<span class="number">4000000</span>];</span><br><span class="line"><span class="keyword">int</span> front=<span class="number">-1</span>, rear=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">2005</span>][<span class="number">2005</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> start_x,start_y;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">800000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(Node x, Node <span class="built_in">queue</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>[++rear]=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">deQueue</span><span class="params">(Node <span class="built_in">queue</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node x = <span class="built_in">queue</span>[++front];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node a;     a.x=start_x, a.y=start_y, a.level=<span class="number">0</span>, a.flag=<span class="number">0</span>;</span><br><span class="line">    enQueue(a,<span class="built_in">queue</span>);</span><br><span class="line">    visit[a.x][a.y][a.flag]=<span class="number">1</span>;</span><br><span class="line">    Node top;</span><br><span class="line">    <span class="keyword">while</span>(front &lt; rear)&#123;</span><br><span class="line">        top = deQueue(<span class="built_in">queue</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>[top.x][top.y]==<span class="string">&#x27;P&#x27;</span>)</span><br><span class="line">            top.flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>[top.x][top.y] == <span class="string">&#x27;T&#x27;</span> &amp;&amp; top.flag == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> top.level;</span><br><span class="line">        Node tmp; </span><br><span class="line">        tmp.level = top.level+<span class="number">1</span>;    tmp.flag=top.flag;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x+<span class="number">1</span>, tmp.y = top.y; </span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y) &amp;&amp; visit[tmp.x][tmp.y][tmp.flag] == <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[tmp.x][tmp.y] != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y][tmp.flag]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x, tmp.y = top.y+<span class="number">1</span>; </span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y) &amp;&amp; visit[tmp.x][tmp.y][tmp.flag] == <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[tmp.x][tmp.y] != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y][tmp.flag]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x<span class="number">-1</span>, tmp.y = top.y; </span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y) &amp;&amp; visit[tmp.x][tmp.y][tmp.flag] == <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[tmp.x][tmp.y] != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y][tmp.flag]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x, tmp.y = top.y<span class="number">-1</span>; </span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y) &amp;&amp; visit[tmp.x][tmp.y][tmp.flag] == <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[tmp.x][tmp.y] != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y][tmp.flag]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">char</span> tmp;</span><br><span class="line">            <span class="keyword">if</span>(j==n<span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;tmp);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%c &quot;</span>,&amp;tmp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tmp==<span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">                start_x=i; start_y=j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">map</span>[i][j]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    build();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,BFS());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数独">4. 数独</h3><h4 id="题目-3">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709114423989.png" alt="image-20210709114423989"><figcaption aria-hidden="true">image-20210709114423989</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709114438969.png" alt="image-20210709114438969"><figcaption aria-hidden="true">image-20210709114438969</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709114447941.png" alt="image-20210709114447941"><figcaption aria-hidden="true">image-20210709114447941</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709114503377.png" alt="image-20210709114503377"><figcaption aria-hidden="true">image-20210709114503377</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210709114513609.png" alt="image-20210709114513609"><figcaption aria-hidden="true">image-20210709114513609</figcaption></figure><h4 id="思路-3">思路</h4><p>和前两个题一样的思路，只不过这里不用两次递归也不用辅助访问数组，因为地图本身就可以充当一个访问数组。</p><p>需要注意的是这里的判断条件，行和列都很简单，对于块的判断，这里的做法是<strong>利用整型数除法的特点，找到当前块左上角的元素坐标</strong>。</p><h4 id="代码-3">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">line</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;<span class="number">9</span>;x++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>[x][j]==<span class="built_in">map</span>[i][j] &amp;&amp; i!=x)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>;y&lt;<span class="number">9</span>;y++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>[i][y]==<span class="built_in">map</span>[i][j] &amp;&amp; j!=y)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">nine</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=i/<span class="number">3</span>,y=j/<span class="number">3</span>;</span><br><span class="line">    x*=<span class="number">3</span>,y*=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> m=x;m&lt;x+<span class="number">3</span>;m++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n=y;n&lt;y+<span class="number">3</span>;n++)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[m][n]==<span class="built_in">map</span>[i][j] &amp;&amp; (m != i || n != j))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="number">8</span> &amp;&amp; j&gt;<span class="number">8</span>)&#123;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">map</span>[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">9</span>;k++)&#123;</span><br><span class="line">            <span class="built_in">map</span>[i][j]=k;</span><br><span class="line">            <span class="keyword">if</span>(line(i,j) &amp;&amp; nine(i,j))&#123;</span><br><span class="line">                <span class="keyword">if</span>(j!=<span class="number">8</span>)</span><br><span class="line">                    DFS(i,j+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    DFS(i+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">map</span>[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(j!=<span class="number">8</span>)</span><br><span class="line">            DFS(i,j+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            DFS(i+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">char</span> tmp;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c &quot;</span>,&amp;tmp);</span><br><span class="line">            <span class="keyword">if</span>(tmp&lt;=<span class="string">&#x27;9&#x27;</span> &amp;&amp; tmp&gt;=<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                <span class="built_in">map</span>[i][j]=tmp-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">map</span>[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    DFS(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">map</span>[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;不像之前会指定广度搜索或深度搜索，这次需要根据题目要求自己判断选取。&lt;/p&gt;
&lt;p&gt;其实图的题归根到底都可以看作是树，那么只需要考虑所需要的是一次到底的&lt;strong&gt;深度遍历&lt;/strong&gt;，还是一层一层的&lt;strong&gt;层次</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="实训" scheme="http://example.com/tags/%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>暑期实训——广度优先搜索BFS</title>
    <link href="http://example.com/2021/07/08/%E6%9A%91%E6%9C%9F%E5%AE%9E%E8%AE%AD%E2%80%94%E2%80%94%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2BFS/"/>
    <id>http://example.com/2021/07/08/%E6%9A%91%E6%9C%9F%E5%AE%9E%E8%AE%AD%E2%80%94%E2%80%94%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2BFS/</id>
    <published>2021-07-08T02:47:08.000Z</published>
    <updated>2021-07-08T03:59:37.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>BFS主要靠<strong>队列</strong>实现。</p><p><strong>有几个必要的结构（一般在全局中定义，可以避免多次传递与修改</strong></p><ol type="1"><li>用来记录是否当前点是否访问过的<strong>Visit[]数组</strong></li><li>用来进行向外有序扩散的<strong>队列</strong>，以及其必要的队首队尾指针，出队入队函数</li></ol><p><strong>在BFS的实现函数中，也有几个必要的组成部分：</strong></p><ol type="1"><li>一个起始点，也就是最先入队的点</li><li><strong>标记</strong>当前点为已访问</li><li>确定<strong>脱离循环</strong>的条件</li><li>出队节点，建立新节点，并基于出对节点对新节点进行<strong>相关操作</strong></li><li>题目的其他<strong>限制条件</strong>，比如是否有一些点不能走，用于<strong>剪枝</strong></li><li>对于题目要求的答案的记录，也就是<strong>步长</strong>的记录</li></ol><h2 id="bfs模板">BFS模板</h2><p><strong>队列</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">n</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">Node <span class="built_in">queue</span>[<span class="number">5005</span>];</span><br><span class="line"><span class="keyword">int</span> front=<span class="number">-1</span>, rear=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">5005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(Node x, Node <span class="built_in">queue</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>[++rear]=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">deQueue</span><span class="params">(Node <span class="built_in">queue</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node x = <span class="built_in">queue</span>[++front];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BFS</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始节点入队</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;isStart(arr[i]) &amp;&amp; i&lt;n;i++)&#123;</span><br><span class="line">        arr[i].level=<span class="number">1</span>;</span><br><span class="line">        enQueue(arr[i],<span class="built_in">queue</span>);</span><br><span class="line">        visit[arr[i].num]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 进行BFS循环，向外扩张</span></span><br><span class="line">    <span class="keyword">while</span>(front&lt;rear)&#123;</span><br><span class="line">        Point top;   top = deQueue(<span class="built_in">queue</span>); <span class="comment">//出队节点</span></span><br><span class="line">        <span class="keyword">if</span>(isEnd(top))<span class="comment">//判断是否结束循环</span></span><br><span class="line">            <span class="keyword">return</span> top.level;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//进行相关操作</span></span><br><span class="line">            <span class="keyword">if</span>(Mat[top.num][i]==<span class="number">1</span> &amp;&amp; visit[arr[i].num] == <span class="number">0</span>)&#123;</span><br><span class="line">                visit[arr[i].num]=<span class="number">1</span>;</span><br><span class="line">                arr[i].level=top.level+<span class="number">1</span>;</span><br><span class="line">                enQueue(arr[i],<span class="built_in">queue</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//没有找到目标值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习题">练习题</h2><h3 id="一维坐标的移动">1. 一维坐标的移动</h3><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708104916477.png" alt="image-20210708104916477"><figcaption aria-hidden="true">image-20210708104916477</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708104934468.png" alt="image-20210708104934468"><figcaption aria-hidden="true">image-20210708104934468</figcaption></figure><h4 id="思路">思路</h4><p>三种操作，从起点到终点。</p><h4 id="代码">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">n</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">Node <span class="built_in">queue</span>[<span class="number">5005</span>];</span><br><span class="line"><span class="keyword">int</span> front=<span class="number">-1</span>, rear=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">5005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(Node x, Node <span class="built_in">queue</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>[++rear]=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">deQueue</span><span class="params">(Node <span class="built_in">queue</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node x = <span class="built_in">queue</span>[++front];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,start,end;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;start,&amp;end);</span><br><span class="line">    Node a;     a.d=start,a.level=<span class="number">0</span>;</span><br><span class="line">    enQueue(a,<span class="built_in">queue</span>);</span><br><span class="line">    visit[a.d]=<span class="number">1</span>;</span><br><span class="line">    Node top;   top = deQueue(<span class="built_in">queue</span>);</span><br><span class="line">    <span class="keyword">while</span>(top.d!=end)&#123;</span><br><span class="line">        Node tmp;</span><br><span class="line">        tmp.d = top.d*<span class="number">2</span>, tmp.level = top.level+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(tmp.d &gt;= <span class="number">0</span> &amp;&amp; tmp.d &lt;= n &amp;&amp; visit[tmp.d] == <span class="number">0</span>)&#123;</span><br><span class="line">            visit[tmp.d]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.d = top.d+<span class="number">1</span>, tmp.level = top.level+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(tmp.d &gt;= <span class="number">0</span> &amp;&amp; tmp.d &lt;=n &amp;&amp; visit[tmp.d] == <span class="number">0</span>)&#123;</span><br><span class="line">            visit[tmp.d]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.d = top.d<span class="number">-1</span>, tmp.level = top.level+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(tmp.d &gt;= <span class="number">0</span> &amp;&amp; tmp.d &lt;= n &amp;&amp; visit[tmp.d] == <span class="number">0</span>)&#123;</span><br><span class="line">            visit[tmp.d]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        top = deQueue(<span class="built_in">queue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,top.level);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="仙岛求药">2. 仙岛求药</h3><h4 id="题目">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708105220234.png" alt="image-20210708105220234"><figcaption aria-hidden="true">image-20210708105220234</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708105254255.png" alt="image-20210708105254255"><figcaption aria-hidden="true">image-20210708105254255</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708105306629.png" alt="image-20210708105306629"><figcaption aria-hidden="true">image-20210708105306629</figcaption></figure><h4 id="思路-1">思路</h4><p>思路与上一题相同，只是从一维变成了二维</p><h4 id="代码-1">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">n</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">Node <span class="built_in">queue</span>[<span class="number">25</span>*<span class="number">25</span>];</span><br><span class="line"><span class="keyword">int</span> front=<span class="number">-1</span>, rear=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x&lt;m &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(Node x, Node <span class="built_in">queue</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>[++rear]=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">deQueue</span><span class="params">(Node <span class="built_in">queue</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node x = <span class="built_in">queue</span>[++front];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> start_x,start_y,end_x,end_y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;m,&amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">char</span> tmp;</span><br><span class="line">            <span class="keyword">if</span>(j==n<span class="number">-1</span>)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;tmp);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%c &quot;</span>,&amp;tmp);</span><br><span class="line">            <span class="keyword">if</span>(tmp==<span class="string">&#x27;@&#x27;</span>)&#123;</span><br><span class="line">                start_x=i; start_y=j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tmp==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                end_x=i; end_y=j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">map</span>[i][j]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Node a;     a.x=start_x, a.y=start_y, a.level=<span class="number">0</span>;</span><br><span class="line">    enQueue(a,<span class="built_in">queue</span>);</span><br><span class="line">    visit[a.x][a.y]=<span class="number">1</span>;</span><br><span class="line">    Node top;    top = deQueue(<span class="built_in">queue</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>((top.x != end_x || top.y != end_y) &amp;&amp; front &lt;= rear)&#123;</span><br><span class="line">        </span><br><span class="line">        Node tmp; </span><br><span class="line">        tmp.level = top.level+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x+<span class="number">1</span>, tmp.y = top.y; </span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y) &amp;&amp; visit[tmp.x][tmp.y] == <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[tmp.x][tmp.y] != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x, tmp.y = top.y+<span class="number">1</span>; </span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y) &amp;&amp; visit[tmp.x][tmp.y] == <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[tmp.x][tmp.y] != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x<span class="number">-1</span>, tmp.y = top.y; </span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y) &amp;&amp; visit[tmp.x][tmp.y] == <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[tmp.x][tmp.y] != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x, tmp.y = top.y<span class="number">-1</span>; </span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y) &amp;&amp; visit[tmp.x][tmp.y] == <span class="number">0</span> &amp;&amp; <span class="built_in">map</span>[tmp.x][tmp.y] != <span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        top = deQueue(<span class="built_in">queue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(front &lt;= rear)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,top.level);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="吃糖的时间">3. 吃糖的时间</h3><h4 id="题目-1">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708110151560.png" alt="image-20210708110151560"><figcaption aria-hidden="true">image-20210708110151560</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708110227294.png" alt="image-20210708110227294"><figcaption aria-hidden="true">image-20210708110227294</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708110238871.png" alt="image-20210708110238871"><figcaption aria-hidden="true">image-20210708110238871</figcaption></figure><h4 id="思路-2">思路</h4><p>用<strong>邻接表</strong>来储存关系。</p><p>需要注意的是，由于头节点和边界点的类型不同，所以边界点中的`<code>level</code>值无法传递给头节点，所以设置了一个变量<code>level</code>用于传递。</p><p>而且由于第一个进行处理的也是头节点的下标，无法进入队列，所以设置了一个用于类比存储第一个头节点值的边界点变量<code>temp</code>。</p><h4 id="代码-2">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;EdgeNode;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HeadNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    EdgeNode *edgeNode;</span><br><span class="line">&#125;HeadNode;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line">    HeadNode arr[<span class="number">100005</span>];</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> e;</span><br><span class="line">&#125;Graph;</span><br><span class="line"></span><br><span class="line">Graph G;</span><br><span class="line"><span class="keyword">int</span> n,p,c,m,level;</span><br><span class="line">EdgeNode *<span class="built_in">queue</span>[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> front=<span class="number">-1</span>, rear=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">1000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(EdgeNode *x, EdgeNode *<span class="built_in">queue</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>[++rear]=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">EdgeNode <span class="title">deQueue</span><span class="params">(EdgeNode *<span class="built_in">queue</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    EdgeNode *x = <span class="built_in">queue</span>[++front];</span><br><span class="line">    <span class="keyword">return</span> *x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=G.v;i++)&#123;</span><br><span class="line">        G.arr[i].data=i;</span><br><span class="line">        G.arr[i].edgeNode=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=G.e;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">if</span>(a!=b)&#123;</span><br><span class="line">            EdgeNode *temp1=(EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">            EdgeNode *temp2=(EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">            temp1-&gt;index=a; temp1-&gt;l=<span class="number">1</span>; temp1-&gt;next=G.arr[b].edgeNode; G.arr[b].edgeNode=temp1;</span><br><span class="line">            temp2-&gt;index=b; temp2-&gt;l=<span class="number">1</span>; temp2-&gt;next=G.arr[a].edgeNode; G.arr[a].edgeNode=temp2;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visit[i]=<span class="number">1</span>;</span><br><span class="line">    level=<span class="number">1</span>;</span><br><span class="line">    EdgeNode *tmp=(EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));  </span><br><span class="line">    tmp-&gt;l=<span class="number">1</span>, tmp-&gt;index=<span class="number">1</span>;</span><br><span class="line">    enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">    EdgeNode *now=(EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">    <span class="keyword">while</span>(front &lt; rear)&#123;</span><br><span class="line">        *now=deQueue(<span class="built_in">queue</span>);</span><br><span class="line">        level = now-&gt;l+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// printf(&quot;%d %d\n&quot;,now-&gt;index,now-&gt;l);</span></span><br><span class="line">        EdgeNode *<span class="keyword">new</span>=G.arr[now-&gt;index].edgeNode;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">new</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!visit[<span class="keyword">new</span>-&gt;index])&#123;</span><br><span class="line">                <span class="keyword">new</span>-&gt;l=level;</span><br><span class="line">                enQueue(<span class="keyword">new</span>,<span class="built_in">queue</span>);</span><br><span class="line">                visit[<span class="keyword">new</span>-&gt;index]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">new</span>=<span class="keyword">new</span>-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,now-&gt;l+m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;p,&amp;c,&amp;m);</span><br><span class="line">    G.v=n,G.e=p;</span><br><span class="line">    build();</span><br><span class="line">    BFS(c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="奇怪的电梯">4. 奇怪的电梯</h3><h4 id="题目-2">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708114625045.png" alt="image-20210708114625045"><figcaption aria-hidden="true">image-20210708114625045</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708114638964.png" alt="image-20210708114638964"><figcaption aria-hidden="true">image-20210708114638964</figcaption></figure><h4 id="思路-3">思路</h4><p>和一维数组相同</p><h4 id="代码-3">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">n</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">Node <span class="built_in">queue</span>[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> front=<span class="number">-1</span>, rear=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> k[<span class="number">205</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(Node x, Node <span class="built_in">queue</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>[++rear]=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">deQueue</span><span class="params">(Node <span class="built_in">queue</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node x = <span class="built_in">queue</span>[++front];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,start,end;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;start,&amp;end);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k[i]);</span><br><span class="line">        <span class="comment">// printf(&quot;%d&quot;,k[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    Node a;     a.d=start,a.level=<span class="number">0</span>;</span><br><span class="line">    enQueue(a,<span class="built_in">queue</span>);</span><br><span class="line">    visit[a.d]=<span class="number">1</span>;</span><br><span class="line">    Node top;   top = deQueue(<span class="built_in">queue</span>);</span><br><span class="line">    <span class="keyword">while</span>(top.d!=end &amp;&amp; front&lt;=rear)&#123;</span><br><span class="line">        Node tmp;</span><br><span class="line">        tmp.d = top.d+k[top.d], tmp.level = top.level+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(tmp.d &gt;= <span class="number">1</span> &amp;&amp; tmp.d &lt;= n &amp;&amp; visit[tmp.d] == <span class="number">0</span>)&#123;</span><br><span class="line">            visit[tmp.d]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        tmp.d = top.d-k[top.d], tmp.level = top.level+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(tmp.d &gt;= <span class="number">1</span> &amp;&amp; tmp.d &lt;= n &amp;&amp; visit[tmp.d] == <span class="number">0</span>)&#123;</span><br><span class="line">            visit[tmp.d]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        top = deQueue(<span class="built_in">queue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(front&lt;=rear)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,top.level);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="密码锁">5.密码锁</h3><h4 id="题目-3">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708114733214.png" alt="image-20210708114733214"><figcaption aria-hidden="true">image-20210708114733214</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708114744969.png" alt="image-20210708114744969"><figcaption aria-hidden="true">image-20210708114744969</figcaption></figure><h4 id="思路-4">思路</h4><p>四维空间内的迷宫问题</p><h4 id="代码-4">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">n</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> z;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">Node <span class="built_in">queue</span>[<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">int</span> front=<span class="number">-1</span>, rear=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">10</span>][<span class="number">10</span>][<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">10</span>][<span class="number">10</span>][<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&gt;=<span class="number">1</span> &amp;&amp; x&lt;=<span class="number">9</span> &amp;&amp; y&gt;=<span class="number">1</span> &amp;&amp; y&lt;=<span class="number">9</span> &amp;&amp; z&gt;=<span class="number">1</span> &amp;&amp; z&lt;=<span class="number">9</span> &amp;&amp; t&gt;=<span class="number">1</span> &amp;&amp; t&lt;=<span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(Node x, Node <span class="built_in">queue</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>[++rear]=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node <span class="title">deQueue</span><span class="params">(Node <span class="built_in">queue</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node x = <span class="built_in">queue</span>[++front];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> start_x,start_y,start_z,start_t0,end_x,end_y,end_z,end_t0;</span><br><span class="line">    <span class="keyword">int</span> start,end;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;start,&amp;end);</span><br><span class="line">    start_x=start%<span class="number">10</span>, start_y=start/<span class="number">10</span>%<span class="number">10</span>, start_z=start/<span class="number">100</span>%<span class="number">10</span>, start_t0=start/<span class="number">1000</span>;</span><br><span class="line">    end_x=end%<span class="number">10</span>, end_y=end/<span class="number">10</span>%<span class="number">10</span>, end_z=end/<span class="number">100</span>%<span class="number">10</span>, end_t0=end/<span class="number">1000</span>;</span><br><span class="line">    </span><br><span class="line">    Node a;     a.x=start_x, a.y=start_y, a.z=start_z, a.t=start_t0, a.level=<span class="number">0</span>;</span><br><span class="line">    enQueue(a,<span class="built_in">queue</span>);</span><br><span class="line">    visit[a.x][a.y][a.z][a.t]=<span class="number">1</span>;</span><br><span class="line">    Node top;    top = deQueue(<span class="built_in">queue</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>((top.x != end_x || top.y != end_y || top.z != end_z || top.t != end_t0) &amp;&amp; front &lt;= rear)&#123;</span><br><span class="line"></span><br><span class="line">        Node tmp; </span><br><span class="line">        tmp.level = top.level+<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x+<span class="number">1</span>, tmp.y = top.y, tmp.z=top.z, tmp.t=top.t;</span><br><span class="line">        <span class="keyword">if</span>(tmp.x==<span class="number">10</span>)   tmp.x=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y,tmp.z,tmp.t) &amp;&amp; visit[tmp.x][tmp.y][tmp.z][tmp.t] == <span class="number">0</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y][tmp.z][tmp.t]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x<span class="number">-1</span>, tmp.y = top.y, tmp.z=top.z, tmp.t=top.t; </span><br><span class="line">        <span class="keyword">if</span>(tmp.x==<span class="number">0</span>)    tmp.x=<span class="number">9</span>;</span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y,tmp.z,tmp.t) &amp;&amp; visit[tmp.x][tmp.y][tmp.z][tmp.t] == <span class="number">0</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y][tmp.z][tmp.t]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x, tmp.y = top.y+<span class="number">1</span>, tmp.z=top.z, tmp.t=top.t; </span><br><span class="line">        <span class="keyword">if</span>(tmp.y==<span class="number">10</span>)   tmp.y=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y,tmp.z,tmp.t) &amp;&amp; visit[tmp.x][tmp.y][tmp.z][tmp.t] == <span class="number">0</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y][tmp.z][tmp.t]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x, tmp.y = top.y<span class="number">-1</span>, tmp.z=top.z, tmp.t=top.t; </span><br><span class="line">        <span class="keyword">if</span>(tmp.y==<span class="number">0</span>)   tmp.y=<span class="number">9</span>;</span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y,tmp.z,tmp.t) &amp;&amp; visit[tmp.x][tmp.y][tmp.z][tmp.t] == <span class="number">0</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y][tmp.z][tmp.t]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x, tmp.y = top.y, tmp.z=top.z+<span class="number">1</span>, tmp.t=top.t;</span><br><span class="line">        <span class="keyword">if</span>(tmp.z==<span class="number">10</span>)   tmp.z=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y,tmp.z,tmp.t) &amp;&amp; visit[tmp.x][tmp.y][tmp.z][tmp.t] == <span class="number">0</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y][tmp.z][tmp.t]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x, tmp.y = top.y, tmp.z=top.z<span class="number">-1</span>, tmp.t=top.t; </span><br><span class="line">        <span class="keyword">if</span>(tmp.z==<span class="number">0</span>)   tmp.z=<span class="number">9</span>;</span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y,tmp.z,tmp.t) &amp;&amp; visit[tmp.x][tmp.y][tmp.z][tmp.t] == <span class="number">0</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y][tmp.z][tmp.t]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x, tmp.y = top.y, tmp.z=top.z, tmp.t=top.t+<span class="number">1</span>; </span><br><span class="line">        <span class="keyword">if</span>(tmp.t==<span class="number">10</span>)   tmp.t=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y,tmp.z,tmp.t) &amp;&amp; visit[tmp.x][tmp.y][tmp.z][tmp.t] == <span class="number">0</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y][tmp.z][tmp.t]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x, tmp.y = top.y, tmp.z=top.z, tmp.t=top.t<span class="number">-1</span>; </span><br><span class="line">        <span class="keyword">if</span>(tmp.x==<span class="number">0</span>)   tmp.x=<span class="number">9</span>;</span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y,tmp.z,tmp.t) &amp;&amp; visit[tmp.x][tmp.y][tmp.z][tmp.t] == <span class="number">0</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y][tmp.z][tmp.t]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.y, tmp.y = top.x, tmp.z=top.z, tmp.t=top.t; </span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y,tmp.z,tmp.t) &amp;&amp; visit[tmp.x][tmp.y][tmp.z][tmp.t] == <span class="number">0</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y][tmp.z][tmp.t]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x, tmp.y = top.z, tmp.z=top.y, tmp.t=top.t; </span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y,tmp.z,tmp.t) &amp;&amp; visit[tmp.x][tmp.y][tmp.z][tmp.t] == <span class="number">0</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y][tmp.z][tmp.t]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        tmp.x = top.x, tmp.y = top.y, tmp.z=top.t, tmp.t=top.z; </span><br><span class="line">        <span class="keyword">if</span>(in(tmp.x,tmp.y,tmp.z,tmp.t) &amp;&amp; visit[tmp.x][tmp.y][tmp.z][tmp.t] == <span class="number">0</span>)&#123;</span><br><span class="line">            visit[tmp.x][tmp.y][tmp.z][tmp.t]=<span class="number">1</span>;</span><br><span class="line">            enQueue(tmp,<span class="built_in">queue</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        top = deQueue(<span class="built_in">queue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(front &lt;= rear)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,top.level);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="奶酪">6. 奶酪</h3><h4 id="题目-4">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708114853102.png" alt="image-20210708114853102"><figcaption aria-hidden="true">image-20210708114853102</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708114909920.png" alt="image-20210708114909920"><figcaption aria-hidden="true">image-20210708114909920</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708114926750.png" alt="image-20210708114926750"><figcaption aria-hidden="true">image-20210708114926750</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708114943435.png" alt="image-20210708114943435"><figcaption aria-hidden="true">image-20210708114943435</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708115015577.png" alt="image-20210708115015577"><figcaption aria-hidden="true">image-20210708115015577</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/image-20210708115030190.png" alt="image-20210708115030190"><figcaption aria-hidden="true">image-20210708115030190</figcaption></figure><h4 id="思路-5">思路</h4><p>也是基于BFS的思路，用<strong>邻接矩阵</strong>实现。相互联通的洞即为有关系的点。</p><p>需要注意的是，有多个入口的时候，可以采取把所有入口依次入队的操作，其实也是假设有一个虚拟的<strong>原始起点</strong>的思想。</p><p>还有在对于距离的判断函数中，注意要用<code>long long</code>的类型，因为乘积很有可能在<code>int</code>中溢出。以及最后的返回形式，为了保证精度不丢失，不能直接返回<code>int</code>型的<code>x</code>，而比较后再返回比较的结果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dist</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x=<span class="built_in">sqrt</span>(((<span class="keyword">long</span> <span class="keyword">long</span>)a.x-b.x) * (a.x-b.x) + ((<span class="keyword">long</span> <span class="keyword">long</span>)a.y-b.y) * (a.y-b.y) + ((<span class="keyword">long</span> <span class="keyword">long</span>)a.z-b.z) * (a.z-b.z));</span><br><span class="line">    <span class="keyword">return</span> x - <span class="number">2</span> * r &lt;= <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实<code>sqrt</code>也会有精度丢失的问题，更好的做法应该是不开根号，直接与 r<sup>2</sup> 进行比较。</p><h4 id="代码-5">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> z;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">&#125;Point;</span><br><span class="line"></span><br><span class="line">Point arr[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> Mat[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line">Point <span class="built_in">queue</span>[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> front=<span class="number">-1</span>,rear=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> n,h,r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((struct node *)a)-&gt;z-((struct node *)b)-&gt;z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dist</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x=<span class="built_in">sqrt</span>(((<span class="keyword">long</span> <span class="keyword">long</span>)a.x-b.x) * (a.x-b.x) + ((<span class="keyword">long</span> <span class="keyword">long</span>)a.y-b.y) * (a.y-b.y) + ((<span class="keyword">long</span> <span class="keyword">long</span>)a.z-b.z) * (a.z-b.z));</span><br><span class="line">    <span class="keyword">return</span> x - <span class="number">2</span> * r &lt;= <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isStart</span><span class="params">(Point a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.z&lt;=r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEnd</span><span class="params">(Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b.z&gt;=h-r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(Point x, Point <span class="built_in">queue</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>[++rear]=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">deQueue</span><span class="params">(Point <span class="built_in">queue</span>[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Point x = <span class="built_in">queue</span>[++front];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;h,&amp;r);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        arr[i].x=x; arr[i].y=y; arr[i].z=z; arr[i].num=i;  arr[i].level=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(arr,n,<span class="keyword">sizeof</span>(struct node),cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        arr[i].num=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dist(arr[i],arr[j]))&#123;</span><br><span class="line">                Mat[i][j]=<span class="number">1</span>; Mat[j][i]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;isStart(arr[i]) &amp;&amp; i&lt;n;i++)&#123;</span><br><span class="line">        arr[i].level=<span class="number">1</span>;</span><br><span class="line">        enQueue(arr[i],<span class="built_in">queue</span>);</span><br><span class="line">        visit[arr[i].num]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(front&lt;rear)&#123;</span><br><span class="line">        Point top;   top = deQueue(<span class="built_in">queue</span>);</span><br><span class="line">        <span class="keyword">if</span>(isEnd(top))</span><br><span class="line">            <span class="keyword">return</span> top.level;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(Mat[top.num][i]==<span class="number">1</span> &amp;&amp; visit[arr[i].num] == <span class="number">0</span>)&#123;</span><br><span class="line">                visit[arr[i].num]=<span class="number">1</span>;</span><br><span class="line">                arr[i].level=top.level+<span class="number">1</span>;</span><br><span class="line">                enQueue(arr[i],<span class="built_in">queue</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(arr,<span class="number">0</span>,<span class="keyword">sizeof</span>(arr));</span><br><span class="line">        <span class="built_in">memset</span>(Mat,<span class="number">0</span>,<span class="keyword">sizeof</span>(Mat));</span><br><span class="line">        <span class="built_in">memset</span>(visit,<span class="number">0</span>,<span class="keyword">sizeof</span>(visit));</span><br><span class="line">        <span class="built_in">memset</span>(<span class="built_in">queue</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="built_in">queue</span>));</span><br><span class="line">        front=rear=<span class="number">-1</span>;</span><br><span class="line">        build();</span><br><span class="line">        <span class="comment">// BFS();</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,BFS());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;BFS主要靠&lt;strong&gt;队列&lt;/strong&gt;实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有几个必要的结构（一般在全局中定义，可以避免多次传递与修改&lt;/strong&gt;&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;用来记录是否当前</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="实训" scheme="http://example.com/tags/%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>暑期实训——深度优先搜索DFS</title>
    <link href="http://example.com/2021/07/07/%E6%9A%91%E6%9C%9F%E5%AE%9E%E8%AE%AD%E2%80%94%E2%80%94%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2DFS/"/>
    <id>http://example.com/2021/07/07/%E6%9A%91%E6%9C%9F%E5%AE%9E%E8%AE%AD%E2%80%94%E2%80%94%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2DFS/</id>
    <published>2021-07-07T02:40:07.000Z</published>
    <updated>2021-07-07T06:05:57.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>DFS主要靠栈/递归实现，一般<strong>递归</strong>更常见也更方便。</p><p><strong>有几个必要的结构（一般在全局中定义，可以避免多次传递与修改</strong></p><ol type="1"><li>用来记录是否当前点是否访问过的<strong>Visit[]数组</strong></li><li>用来储存图结构的<strong>邻接矩阵</strong>或<strong>邻接表</strong></li></ol><p><strong>在DFS的实现函数中，也有几个必要的组成部分：</strong></p><ol type="1"><li><strong>标记</strong>当前点为已访问</li><li><strong>递归出口</strong>，即终止条件</li><li>题目的其他<strong>限制条件</strong>，比如是否有一些点不能走</li><li>题目对于当前点的<strong>相关操作</strong>，如前进、后退等（用作下一步递归）</li><li>对于题目要求的<strong>答案</strong>的记录</li></ol><h2 id="快速定义邻接表并进行dfs">快速定义邻接表并进行DFS</h2><p><strong>定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;EdgeNode;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HeadNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    EdgeNode *edgeNode;</span><br><span class="line">&#125;HeadNode;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line">    HeadNode arr[<span class="number">20005</span>];</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> e;</span><br><span class="line">&#125;Graph;</span><br><span class="line"></span><br><span class="line">Graph G;</span><br></pre></td></tr></table></figure><p><strong>DFS</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visit[i]=<span class="number">1</span>;</span><br><span class="line">    EdgeNode *p=G.arr[i].edgeNode;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visit[p-&gt;index]==<span class="number">0</span>)&#123;</span><br><span class="line">            DFS(p-&gt;index);</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习题">练习题</h2><h3 id="最大的蛋糕块">1. 最大的蛋糕块</h3><h4 id="题目">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210707105322.png" alt="image-20210707105322845"><figcaption aria-hidden="true">image-20210707105322845</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210707105401.png" alt="image-20210707105401594"><figcaption aria-hidden="true">image-20210707105401594</figcaption></figure><h4 id="思路">思路</h4><p>找到限制条件，设置递归出口，看相关操作进行下一步递归</p><p>用全局变量记录每一次DFS的最大值，与当前最大值做比，用作答案</p><h4 id="代码">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">1005</span>][<span class="number">1005</span>]; </span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> cnt; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!in(x,y) || <span class="built_in">map</span>[x][y]==<span class="string">&#x27;.&#x27;</span> || vis[x][y])</span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">cnt++;</span><br><span class="line">vis[x][y]=<span class="number">1</span>; </span><br><span class="line">dfs(x,y+<span class="number">1</span>);</span><br><span class="line">dfs(x+<span class="number">1</span>,y);</span><br><span class="line">dfs(x,y<span class="number">-1</span>);</span><br><span class="line">dfs(x<span class="number">-1</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">char</span> tmp;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;tmp);</span><br><span class="line">            <span class="built_in">map</span>[i][j]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[i][j]==<span class="string">&#x27;#&#x27;</span> &amp;&amp; !vis[i][j])&#123;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line">dfs(i,j); </span><br><span class="line"><span class="keyword">if</span>(ans&lt;cnt)</span><br><span class="line">ans=cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中国象棋">2. 中国象棋</h3><h4 id="题目-1">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210707110633.png" alt="image-20210707110633385"><figcaption aria-hidden="true">image-20210707110633385</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210707110651.png" alt="image-20210707110650983"><figcaption aria-hidden="true">image-20210707110650983</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210707110705.png" alt="image-20210707110705081"><figcaption aria-hidden="true">image-20210707110705081</figcaption></figure><h4 id="思路-1">思路</h4><p>基本思路和上一题一致</p><p>注意，可能会有没找到的情况，这里用<code>flag</code>记录是否找到</p><h4 id="代码-1">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">15</span>][<span class="number">15</span>]; </span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x&lt;<span class="number">10</span> &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;<span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">map</span>[x][y]==<span class="string">&#x27;T&#x27;</span> &amp;&amp; in(x,y) &amp;&amp; !vis[x][y] &amp;&amp; flag==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span>(!in(x,y) || <span class="built_in">map</span>[x][y]==<span class="string">&#x27;#&#x27;</span> || vis[x][y] || flag==<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">vis[x][y]=<span class="number">1</span>; </span><br><span class="line">dfs(x+<span class="number">1</span>,y+<span class="number">2</span>);</span><br><span class="line">dfs(x<span class="number">-1</span>,y+<span class="number">2</span>);</span><br><span class="line">dfs(x+<span class="number">1</span>,y<span class="number">-2</span>);</span><br><span class="line">dfs(x<span class="number">-1</span>,y<span class="number">-2</span>);</span><br><span class="line">    dfs(x+<span class="number">2</span>,y+<span class="number">1</span>);</span><br><span class="line">dfs(x+<span class="number">2</span>,y<span class="number">-1</span>);</span><br><span class="line">dfs(x<span class="number">-2</span>,y+<span class="number">1</span>);</span><br><span class="line">dfs(x<span class="number">-2</span>,y<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">char</span> tmp;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;tmp);</span><br><span class="line">            <span class="built_in">map</span>[i][j]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[i][j]==<span class="string">&#x27;S&#x27;</span> &amp;&amp; !vis[i][j])&#123;</span><br><span class="line">dfs(i,j); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="踏青">3. 踏青</h3><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210707111014.png" alt="image-20210707111014667"><figcaption aria-hidden="true">image-20210707111014667</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210707111029.png" alt="image-20210707111029596"><figcaption aria-hidden="true">image-20210707111029596</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210707111047.png" alt="image-20210707111047686"><figcaption aria-hidden="true">image-20210707111047686</figcaption></figure><h4 id="思路-2">思路</h4><p>同上</p><h4 id="代码-2">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">105</span>][<span class="number">105</span>]; </span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> cnt; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&gt;=<span class="number">0</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!in(x,y) || <span class="built_in">map</span>[x][y]==<span class="string">&#x27;.&#x27;</span> || vis[x][y])</span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">cnt++;</span><br><span class="line">vis[x][y]=<span class="number">1</span>; </span><br><span class="line">dfs(x,y+<span class="number">1</span>);</span><br><span class="line">dfs(x+<span class="number">1</span>,y);</span><br><span class="line">dfs(x,y<span class="number">-1</span>);</span><br><span class="line">dfs(x<span class="number">-1</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">char</span> tmp;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;tmp);</span><br><span class="line">            <span class="built_in">map</span>[i][j]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[i][j]==<span class="string">&#x27;#&#x27;</span> &amp;&amp; !vis[i][j])&#123;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line">dfs(i,j); </span><br><span class="line"><span class="keyword">if</span>(cnt &gt; <span class="number">0</span>)</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="连通块数量">4. 连通块数量</h3><h4 id="题目-2">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210707111333.png" alt="image-20210707111333705"><figcaption aria-hidden="true">image-20210707111333705</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210707111352.png" alt="image-20210707111352965"><figcaption aria-hidden="true">image-20210707111352965</figcaption></figure><h4 id="思路-3">思路</h4><p><strong>DFS</strong></p><p>求连通块个数可以<strong>依次从每一个有效的没被访问过的点出发</strong>，每次将一个连通块内部全部标记访问，一共出发了多少次就是有多少连通块。</p><p><strong>并查集</strong></p><p>将有关系（即相连）的点并入一个集合，最后看剩下多少个集合</p><h3 id="代码-3">代码</h3><p><strong>DFS</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;EdgeNode;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HeadNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    EdgeNode *edgeNode;</span><br><span class="line">&#125;HeadNode;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line">    HeadNode arr[<span class="number">20005</span>];</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> e;</span><br><span class="line">&#125;Graph;</span><br><span class="line"></span><br><span class="line">Graph G;</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">20005</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=G.v;i++)&#123;</span><br><span class="line">        G.arr[i].data=i;</span><br><span class="line">        G.arr[i].edgeNode=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=G.e;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">if</span>(a!=b)&#123;</span><br><span class="line">            EdgeNode *temp1=(EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">            EdgeNode *temp2=(EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">            temp1-&gt;index=a;  temp1-&gt;next=G.arr[b].edgeNode; G.arr[b].edgeNode=temp1;</span><br><span class="line">            temp2-&gt;index=b;  temp2-&gt;next=G.arr[a].edgeNode; G.arr[a].edgeNode=temp2;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visit[i]=<span class="number">1</span>;</span><br><span class="line">    EdgeNode *p=G.arr[i].edgeNode;</span><br><span class="line">    <span class="comment">// while(p!=NULL)&#123;</span></span><br><span class="line">    <span class="comment">//     while(visit[p-&gt;index])</span></span><br><span class="line">    <span class="comment">//         p=p-&gt;next;</span></span><br><span class="line">    <span class="comment">//     if(p!=NULL &amp;&amp; !visit[p-&gt;index])</span></span><br><span class="line">    <span class="comment">//         DFS(p-&gt;index);</span></span><br><span class="line">    <span class="comment">//     if(p-&gt;next != NULL)</span></span><br><span class="line">    <span class="comment">//         p=p-&gt;next;</span></span><br><span class="line">    <span class="comment">//     else</span></span><br><span class="line">    <span class="comment">//         break;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(visit[p-&gt;index]==<span class="number">0</span>)&#123;</span><br><span class="line">            DFS(p-&gt;index);</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    G.v=n,G.e=m;</span><br><span class="line">    build();</span><br><span class="line">    <span class="comment">// for(int i=1;i&lt;=G.v;i++)&#123;</span></span><br><span class="line">    <span class="comment">//     printf(&quot;%d: &quot;,G.arr[i].data);</span></span><br><span class="line">    <span class="comment">//     EdgeNode *p=G.arr[i].edgeNode;</span></span><br><span class="line">    <span class="comment">//     while(p!=NULL)&#123;</span></span><br><span class="line">    <span class="comment">//         printf(&quot;%d &quot;,p-&gt;index);</span></span><br><span class="line">    <span class="comment">//         p=p-&gt;next;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     printf(&quot;\n&quot;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!visit[i])&#123;</span><br><span class="line">            DFS(i);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,cnt);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>并查集</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> node[<span class="number">20005</span>];</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        node[i] = i; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(x == node[x]) </span><br><span class="line">        <span class="keyword">return</span> x; </span><br><span class="line">    <span class="keyword">return</span> find(node[x]); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    x = find(x); </span><br><span class="line">    y = find(y); </span><br><span class="line">    <span class="keyword">if</span>(x == y) </span><br><span class="line">        <span class="keyword">return</span> ; </span><br><span class="line">    node[x] = y; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    Init(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        Unite(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> p[<span class="number">20005</span>];</span><br><span class="line">    <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p));</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p[find(i)]==<span class="number">0</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            p[find(i)]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引爆炸弹">6. 引爆炸弹</h3><h4 id="题目-3">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210707111627.png" alt="image-20210707111627920"><figcaption aria-hidden="true">image-20210707111627920</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210707111641.png" alt="image-20210707111641641"><figcaption aria-hidden="true">image-20210707111641641</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210707111702.png" alt="image-20210707111702014"><figcaption aria-hidden="true">image-20210707111702014</figcaption></figure><h4 id="思路-4">思路</h4><p><strong>DFS</strong></p><p>即求以行和列构成的连通块数量。</p><p>每一次访问到为<code>1</code>的点，就在<code>visit</code>中将其置为<code>0</code>，<strong>依次访问</strong>所有<code>visit</code>中为<code>1</code>的点，访问次数即为连通块次数。</p><p>每一次DFS都沿着行和列进行扫描</p><p><strong>并查集</strong> 顺着扫，每次读到<code>1</code>就将对应的行和列加入集合，最后看集合个数。</p><h4 id="代码-4">代码</h4><p><strong>DFS</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"><span class="keyword">int</span> visit[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    visit[i][j]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i0=<span class="number">0</span>;i0&lt;n;i0++)</span><br><span class="line">        <span class="keyword">if</span>(visit[i0][j])</span><br><span class="line">            DFS(i0,j);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j0=<span class="number">0</span>;j0&lt;m;j0++)</span><br><span class="line">        <span class="keyword">if</span>(visit[i][j0])</span><br><span class="line">            DFS(i,j0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,<span class="built_in">map</span>[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j]==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                visit[i][j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">        <span class="keyword">if</span>(visit[i][j])&#123;</span><br><span class="line">            DFS(i,j);</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,cnt);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>并查集</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> node[<span class="number">505</span> * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">505</span>][<span class="number">505</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">505</span>*<span class="number">505</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        node[i] = i; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(x == node[x]) </span><br><span class="line">        <span class="keyword">return</span> x; </span><br><span class="line">    <span class="keyword">return</span> node[x] = find(node[x]); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    x = find(x);</span><br><span class="line">    y = find(y);</span><br><span class="line">    <span class="keyword">if</span>(x == y) </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    node[x] = y; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    Init(n+m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,<span class="built_in">map</span>[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j]==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                Unite(i,n+j);</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j]==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> x=find(i);</span><br><span class="line">                <span class="keyword">if</span>(!vis[x])&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    vis[x]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                x=find(n+j);</span><br><span class="line">                <span class="keyword">if</span>(!vis[x])&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    vis[x]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;DFS主要靠栈/递归实现，一般&lt;strong&gt;递归&lt;/strong&gt;更常见也更方便。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有几个必要的结构（一般在全局中定义，可以避免多次传递与修改&lt;/strong&gt;&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="实训" scheme="http://example.com/tags/%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>暑期实训——贪心算法</title>
    <link href="http://example.com/2021/07/06/%E6%9A%91%E6%9C%9F%E5%AE%9E%E8%AE%AD%E2%80%94%E2%80%94%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/07/06/%E6%9A%91%E6%9C%9F%E5%AE%9E%E8%AE%AD%E2%80%94%E2%80%94%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</id>
    <published>2021-07-06T01:19:21.000Z</published>
    <updated>2021-07-06T01:47:26.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>​ 贪心算法，即<strong>局部最优解</strong>。</p><p>​ 一般由两个部分构成，即<strong>排序</strong>和<strong>顺序选择</strong>，排序是为了方便找到当前最优解，然后顺着取就可以了，但是需要注意<strong>终止条件</strong>。</p><h2 id="练习题">练习题</h2><h3 id="混合牛奶">1. 混合牛奶</h3><h4 id="题目">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210706092234.png" alt="image-20210706092234462"><figcaption aria-hidden="true">image-20210706092234462</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210706092323.png" alt="image-20210706092323001"><figcaption aria-hidden="true">image-20210706092323001</figcaption></figure><h4 id="思路">思路</h4><p>思路很简单，就是<strong>尽可能的选择单价较低</strong>的牛奶，这样才能使总金额最小。</p><p>所以第一步，就直接对读取到的数据进行<strong>排序</strong>。一开始我自己写了一个排序算法，但其实没有必要，在<code>C++</code>中其实给了很多用于排序的库函数，比如这里的<code>swap（）</code>，其实在<code>C</code>中也有类似的。（或许需要找个时间阅读一下<code>C</code>的<a href="https://www.runoob.com/cprogramming/c-standard-library.html">标准库函数</a></p><p>而且这里的排序是直接对<strong>结构体数组</strong>进行的操作。</p><p>排好序之后<strong>顺着取</strong>就可以了，只是需要注意上限是<code>100</code>，所以对于取完不满<code>100</code>的，直接取就行，对于取了会超的，<strong>只取不会超的一部分</strong>。</p><h4 id="代码">代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> p, x;</span><br><span class="line">&#125; a[<span class="number">5005</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// struct Node min(struct Node a[],int n,int visit[])</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     int min=1000,ad=0;</span></span><br><span class="line"><span class="comment">//     for(int i=0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">//         if(a[i].p&lt;min&amp;&amp;visit[i]==0)&#123;</span></span><br><span class="line"><span class="comment">//             min=a[i].p;</span></span><br><span class="line"><span class="comment">//             ad=i;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     visit[ad]=1;</span></span><br><span class="line"><span class="comment">//     return a[ad];</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;milk.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;milk.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="keyword">int</span> n,m,i,j,result=<span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i].p &gt;&gt; a[i].x;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i].p&gt;a[j].p)&#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[i],a[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for(i=1;i&lt;m;i++)</span></span><br><span class="line">    <span class="comment">//     printf(&quot;%d\n&quot;,a[i].p);</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;=a[i].x)&#123;</span><br><span class="line">            n-=a[i].x;</span><br><span class="line">            result+=a[i].x*a[i].p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result+=n*a[i].p;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="蘑菇森林">2. 蘑菇森林</h3><h4 id="题目-1">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210706093051.png" alt="image-20210706093051485"><figcaption aria-hidden="true">image-20210706093051485</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210706093111.png" alt="image-20210706093111589"><figcaption aria-hidden="true">image-20210706093111589</figcaption></figure><h4 id="思路-1">思路</h4><p>同样是<strong>排序+选择</strong>的框架。</p><p>但是需要注意，排序的时候需要考虑两个因素，一个是<strong>闪避值的上限</strong>，一个是<strong>血量</strong>。为了保证局部最优，需要按照血量由小到大排序，但同时要优先闪避值低于上限的。所以分成两步排序。</p><p>按道理来说，两步那一步在前都可以实现。不过先按闪避值排序似乎可以更快一点，因为后期要做的调整较小。</p><p>（排序的原则是，<strong>越重要的数据因素越靠后排，越稳定的排序算法越靠后用</strong>。</p><h4 id="代码-1">代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;monster[<span class="number">5005</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// void swap(struct node *a, struct node *b)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     struct node *tmp = a;</span></span><br><span class="line"><span class="comment">//     a = b;</span></span><br><span class="line"><span class="comment">//     b = tmp;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;mushroom.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;mushroom.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="keyword">int</span> n,m,h,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>,&amp;n,&amp;m,&amp;h,&amp;b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d\n&quot;</span>,&amp;monster[i].x,&amp;monster[i].y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span>(monster[i].x &gt; monster[j].x)</span><br><span class="line">                <span class="built_in">swap</span>(monster[i], monster[j]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span>(monster[i].y &gt; monster[j].y &amp;&amp; monster[j].x &lt;= h+b)</span><br><span class="line">                <span class="built_in">swap</span>(monster[i], monster[j]);</span><br><span class="line">    <span class="comment">// for(int i = 0; i &lt; n; i++)</span></span><br><span class="line">    <span class="comment">//     printf(&quot;%d %d\n&quot;,monster[i].x,monster[i].y);</span></span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; m &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(h+b&gt;=monster[i].x)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m-monster[i].y&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                m-=monster[i].y;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125; <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线段覆盖">3. 线段覆盖</h3><h4 id="题目-2">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210706094044.png" alt="image-20210706094044860"><figcaption aria-hidden="true">image-20210706094044860</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210706094104.png" alt="image-20210706094103995"><figcaption aria-hidden="true">image-20210706094103995</figcaption></figure><h4 id="思路-2">思路</h4><p>按照<strong>线段右端点排序</strong>，然后舍弃左端点小于前驱右端点（即<strong>有向前覆盖</strong>）的线段。</p><h4 id="代码-2">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">&#125;line[<span class="number">1000005</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// void swap(struct node *a,struct node *b)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     struct node tmp = *a;</span></span><br><span class="line"><span class="comment">//     *a = *b;</span></span><br><span class="line"><span class="comment">//     *b = tmp;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a, <span class="keyword">const</span> <span class="keyword">void</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((struct node *)a)-&gt;r-((struct node *)b)-&gt;r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d\n&quot;</span>,&amp;line[i].l,&amp;line[i].r);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// for(int i = 0; i &lt; n-1; i++)</span></span><br><span class="line">    <span class="comment">//     for(int j = i; j &lt; n; j++)</span></span><br><span class="line">    <span class="comment">//         if(line[i].r &gt; line[j].r)</span></span><br><span class="line">    <span class="comment">//             swap(&amp;line[i], &amp;line[j]);</span></span><br><span class="line">    qsort(line,n,<span class="keyword">sizeof</span>(struct node),cmp);</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> right = line[<span class="number">0</span>].r;</span><br><span class="line">    <span class="comment">// for(int i = 0; i &lt; n; i++)</span></span><br><span class="line">    <span class="comment">//     printf(&quot;%d %d\n&quot;,line[i].l,line[i].r);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span>(right &lt;= line[i].l)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            right = line[i].r;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;​ 贪心算法，即&lt;strong&gt;局部最优解&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​ 一般由两个部分构成，即&lt;strong&gt;排序&lt;/strong&gt;和&lt;strong&gt;顺序选择&lt;/strong&gt;，排序是为了方便找到当前最优解，然后顺着取就</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="实训" scheme="http://example.com/tags/%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>暑期实训——图论基础</title>
    <link href="http://example.com/2021/07/05/%E6%9A%91%E6%9C%9F%E5%AE%9E%E8%AE%AD%E2%80%94%E2%80%94%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/07/05/%E6%9A%91%E6%9C%9F%E5%AE%9E%E8%AE%AD%E2%80%94%E2%80%94%E5%9B%BE%E8%AE%BA%E5%9F%BA%E7%A1%80/</id>
    <published>2021-07-05T14:23:58.000Z</published>
    <updated>2021-07-05T15:40:15.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述">概述</h2><p>​ 主要是一些图的基本概念，如有向图、无向图、树、有向树等，以及邻接表、邻接矩阵等存储方式。</p><p>​ （我似乎更喜欢用邻接矩阵</p><h2 id="练习题">练习题</h2><h3 id="完全图判定">1.完全图判定</h3><h4 id="问题">问题</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210705224427.png" alt="image-20210705224427705"><figcaption aria-hidden="true">image-20210705224427705</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210705224510.png" alt="image-20210705224510322"><figcaption aria-hidden="true">image-20210705224510322</figcaption></figure><h4 id="思路">思路</h4><p>代码思路非常简单，，用<strong>邻接矩阵</strong>存储，由于是无向图，所以只需要检查<strong>上三角</strong>矩阵是否全部为<code>1</code>即可。</p><p>并且，由于数学关系可知，作为完全图，顶点数 <code>n</code> 和 边数 <code>m</code> 满足 <code>n(n-1)/2 = m</code> 的关系，可以作为前提判断。</p><h4 id="代码">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">if</span>(n*(n<span class="number">-1</span>)/<span class="number">2</span>&gt;m)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">map</span>[n][n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">map</span>[a<span class="number">-1</span>][b<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">map</span>[b<span class="number">-1</span>][a<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j]!=<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="稀疏图判定">2. 稀疏图判定</h3><h4 id="题目">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210705225025.png" alt="image-20210705225025147"><figcaption aria-hidden="true">image-20210705225025147</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210705225059.png" alt="image-20210705225058982"><figcaption aria-hidden="true">image-20210705225058982</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210705225120.png" alt="image-20210705225120742"><figcaption aria-hidden="true">image-20210705225120742</figcaption></figure><h4 id="思路-1">思路</h4><p>同样使用邻接矩阵来进行存储，一开始定义了 <code>map[][]</code> 用作储存，后来发现没有必要，<strong>并不是所有的图都需要明确的存储结构，有些只需要逐项处理即可</strong>，对于这道题就是如此。</p><p>对于稀疏图的判定条件，是边数 <code>e</code> 和顶点数 <code>v</code> 满足 <code>e&lt;v*10</code> ，所以<strong>只需要求得 <code>e</code> 和 <code>v</code> 即可</strong>。</p><p>由于是有向图，所以不能再像上一题一样只处理上三角矩阵，这里需要<strong>逐项遍历</strong>，<code>1</code>的个数即为边数。</p><p>而对于顶点数，如何确定n个顶点哪些存在，只需要确定在一行中是否存在<code>1</code> 即可，这也是标值变量<code>flag</code>的作用。</p><h4 id="代码-1">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// int map[105][105];</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,e=<span class="number">0</span>,v=<span class="number">0</span>,flag;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tmp);</span><br><span class="line">            <span class="keyword">if</span>(tmp==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i!=j)</span><br><span class="line">                    e++;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">1</span>)</span><br><span class="line">            v++;</span><br><span class="line">        <span class="keyword">if</span>(e&lt;v*<span class="number">10</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="朋友的距离">3. 朋友的距离</h3><h4 id="题目-1">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210705230053.png" alt="image-20210705230053544"><figcaption aria-hidden="true">image-20210705230053544</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210705230111.png" alt="image-20210705230111404"><figcaption aria-hidden="true">image-20210705230111404</figcaption></figure><h4 id="思路-2">思路</h4><p>将非对称矩阵转换为对称矩阵，即上三角部分和下三角部分进行处理，将不一样的对称点改为相同即可。</p><p>注意标准是<strong>取两项中较大的一项</strong>。</p><h4 id="代码-2">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tmp);</span><br><span class="line">            <span class="built_in">map</span>[i][j]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">map</span>[i][j]!=<span class="built_in">map</span>[j][i])&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>[i][j]&gt;<span class="built_in">map</span>[j][i])</span><br><span class="line">                    <span class="built_in">map</span>[j][i]=<span class="built_in">map</span>[i][j];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">map</span>[i][j]=<span class="built_in">map</span>[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,<span class="built_in">map</span>[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="邻接表的使用">4. 邻接表的使用</h3><h4 id="题目-2">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210705230428.png" alt="image-20210705230428045"><figcaption aria-hidden="true">image-20210705230428045</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210705230454.png" alt="image-20210705230454350"><figcaption aria-hidden="true">image-20210705230454350</figcaption></figure><h4 id="思路-3">思路</h4><p>首先定义邻接表的储存结构<code>G</code>，包含当前元素的权值和指向后一个元素的指针。</p><p>邻接表的构成要素是<strong>头节点数组</strong>和与对应点邻接的<strong>邻接边构成的链表</strong>。</p><p>定义了头节点数组之后首先要进行初始化，即赋上相应的值，然后指针置空。</p><p>由于输出要求是<strong>后输入的先输入</strong>，所以在进行链表的插入操作时选择<strong>头插法</strong>。</p><p>需要注意的是，输入的数据分为<strong>有向边和无向边</strong>，对于有向边，只需要在数组的一个位置进行插入，而无向边则需要在两个位置均进行插入。</p><h4 id="代码-3">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;G;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    G <span class="built_in">map</span>[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">map</span>[i].d=i;</span><br><span class="line">        <span class="built_in">map</span>[i].next=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">0</span>)&#123;</span><br><span class="line">            G *temp=(G*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(G));</span><br><span class="line">            temp-&gt;d=y;</span><br><span class="line">            temp-&gt;next=<span class="built_in">map</span>[x].next;</span><br><span class="line">            <span class="built_in">map</span>[x].next=temp;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            G *temp1=(G*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(G));</span><br><span class="line">            G *temp2=(G*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(G));</span><br><span class="line">            temp1-&gt;d=y;</span><br><span class="line">            temp1-&gt;next=<span class="built_in">map</span>[x].next;</span><br><span class="line">            <span class="built_in">map</span>[x].next=temp1;</span><br><span class="line">            temp2-&gt;d=x;</span><br><span class="line">            temp2-&gt;next=<span class="built_in">map</span>[y].next;</span><br><span class="line">            <span class="built_in">map</span>[y].next=temp2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d:&quot;</span>,<span class="built_in">map</span>[i].d);</span><br><span class="line">        G* p=<span class="built_in">map</span>[i].next;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,p-&gt;d);</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关系查询">5. 关系查询</h3><h4 id="题目-3">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210705231155.png" alt="image-20210705231155367"><figcaption aria-hidden="true">image-20210705231155367</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210705231218.png" alt="image-20210705231218801"><figcaption aria-hidden="true">image-20210705231218801</figcaption></figure><h4 id="思路-4">思路</h4><p>大意就是会输入一些人的关系，然后进行查询，被查询的两人是否有关系。</p><p>首先想到的是<strong>并查集</strong>，但是由于这里的关系<strong>不具有传递性</strong>，所以pass。</p><p>最后选用的方法是，用图表示，二者之间存在边则表明有关系，选取的存储结构是<strong>邻接矩阵</strong>，在查询的时候也很方便，只需要查询对应坐标下矩阵储存的值即可。</p><p>但是遇到的最大的问题是，由于输入的名字是字符串，但是用矩阵储存的时候需要坐标来索引，<strong>如何将字符串映射到对应的数字上</strong>。</p><p>有两个思路，一个是<strong>暴力法</strong>，直接用<strong>二维数组存储</strong>，然后行号对应其特征坐标，另外一个是<strong>哈希法</strong>，通过一个哈希函数的运算将字符串转化为一个特征的哈希值，一般采用的是<a href="https://www.cnblogs.com/YangKun-/p/12944530.html"><strong>p进制哈希</strong></a>。</p><p>前者优点在于实现方式简单，代码容易，缺点在于无法处理过多数据，浪费空间，所以适用于<strong>数据量较小</strong>的情况。后者优点在于节省空间，但是缺点是思路较为复杂，适用于<strong>数据量较大</strong>的情况。鉴于本题数据量较小，所以直接使用暴力法。</p><p>用插入函数<code>insert()</code>实现读取字符串时的插入，以及查找函数<code>find()</code>，来返回某一字符串的特征值。</p><p>需要注意的是，在一些测试用例中，可能查询<strong>并不存在的字符串</strong>，这种情况需要纳入考虑。</p><h4 id="代码-4">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">2050</span>][<span class="number">250</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> s[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(name[i][<span class="number">0</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(name[i],s)==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcpy</span>(name[i],s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> s[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(name[i][<span class="number">0</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(name[i],s)==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">char</span> name1[<span class="number">25</span>],name2[<span class="number">25</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %s\n&quot;</span>,name1,name2);</span><br><span class="line">        insert(name1);</span><br><span class="line">        insert(name2);</span><br><span class="line">        <span class="keyword">int</span> a=find(name1);</span><br><span class="line">        <span class="keyword">int</span> b=find(name2);</span><br><span class="line">        <span class="built_in">map</span>[a][b]=<span class="number">1</span>;<span class="built_in">map</span>[b][a]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// for(int i=0;name[i][0]!=0;i++)</span></span><br><span class="line">        <span class="comment">// printf(&quot;%s\n&quot;,name[i]);</span></span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">char</span> name1[<span class="number">25</span>],name2[<span class="number">25</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s %s\n&quot;</span>,name1,name2);</span><br><span class="line">        <span class="keyword">int</span> a=find(name1);</span><br><span class="line">        <span class="keyword">int</span> b=find(name2);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">map</span>[a][b]==<span class="number">1</span>&amp;&amp;a!=<span class="number">-1</span>&amp;&amp;b!=<span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="p节点">6. p节点</h3><h4 id="题目-4">题目</h4><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210705232416.png" alt="image-20210705232416074"><figcaption aria-hidden="true">image-20210705232416074</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Liqu1d-G/Cloud_img/master/20210705232438.png" alt="image-20210705232438471"><figcaption aria-hidden="true">image-20210705232438471</figcaption></figure><h4 id="思路-5">思路</h4><p>大意是根据给出的有向边关系，会得到一棵有向树，然后求满足 <strong>度不小于所有儿子和父亲节点</strong>的节点个数。</p><p>需要注意的是，在有向树中，度的概念和图中有一些差别，有向树中的节点的度指拥有孩子节点的个数，即<strong>出度</strong>。</p><p>这里用了全局定义的两个数组，一个一维数组<code>degree[]</code>，用来储存每一个节点的度，一个二维数组<code>edge[][]</code>用来储存邻接矩阵。（之所以用全局变量，是因为全局变量使用的是<strong>堆内存</strong>，而局部变量使用的是<strong>栈内存</strong>，对于较大的数据，全局变量更优，能够避免在某一个函数中由于数据过大发生的溢出）</p><p>在每次读入有向边数据的时候，就对这两个数组进行操作，由于只计算出度，所以只对一个顶点的度进行变化。</p><p>题目给了<code>t</code>组数据，要求给出<code>t</code>组答案，注意，在求每一组答案之前，要将两个全局数组<strong>置零</strong>。</p><p>最后进行某一行标的度，与这一行除自己以外的最大的度的比较，得出与孩子节点相比的结果。</p><p>对于父亲节点，需要编写一个函数来进行定位，定位方法就是确定一列然后进行遍历，找到矩阵中值为<code>1</code>的行。然后就可以进行比较得出与父亲节点相比的结果。</p><h4 id="代码-5">代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> degree[<span class="number">1005</span>],edge[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_father</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(edge[i][k]==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,ans;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(degree,<span class="number">0</span>,<span class="keyword">sizeof</span>(degree));  degree[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(edge,<span class="number">0</span>,<span class="keyword">sizeof</span>(edge));</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> x,y;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">            degree[x]++; </span><br><span class="line">            <span class="comment">// degree[y]++;</span></span><br><span class="line">            edge[x][y]=<span class="number">1</span>; </span><br><span class="line">            <span class="comment">// edge[y][x]=1;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) </span><br><span class="line">                <span class="keyword">if</span>(edge[i][j]&amp;&amp;i!=j)</span><br><span class="line">                    <span class="keyword">if</span>(degree[j]&gt;temp)</span><br><span class="line">                        temp=degree[j];</span><br><span class="line">            <span class="keyword">if</span>(degree[i]&gt;=temp &amp;&amp; degree[i] &gt;= degree[find_father(i,n)])</span><br><span class="line">                ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;​ 主要是一些图的基本概念，如有向图、无向图、树、有向树等，以及邻接表、邻接矩阵等存储方式。&lt;/p&gt;
&lt;p&gt;​ （我似乎更喜欢用邻接矩阵&lt;/p&gt;
&lt;h2 id=&quot;练习题&quot;&gt;练习题&lt;/h2&gt;
&lt;h3 id=&quot;完全图判定&quot;&gt;1.完</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="实训" scheme="http://example.com/tags/%E5%AE%9E%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>恢复ip地址——回溯算法</title>
    <link href="http://example.com/2021/05/02/%E6%81%A2%E5%A4%8Dip%E5%9C%B0%E5%9D%80%E2%80%94%E2%80%94%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2021/05/02/%E6%81%A2%E5%A4%8Dip%E5%9C%B0%E5%9D%80%E2%80%94%E2%80%94%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</id>
    <published>2021-05-02T07:54:35.000Z</published>
    <updated>2021-05-02T07:57:08.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述">问题描述</h1><p>给定一个只包含数字的字符串，用以表示一个 IP 地址，返回所有可能从 s 获得的 有效 IP 地址 。你可以按任何顺序返回答案。</p><p>有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 '.' 分隔。</p><p>例如："0.1.2.201" 和 "192.168.1.1" 是 有效 IP 地址，但是 "0.011.255.245"、"192.168.1.312" 和 "192.168@1.1" 是 无效 IP 地址。</p><blockquote><p>示例 1：</p></blockquote><blockquote><p>输入：s = "25525511135"</p></blockquote><blockquote><p>输出：["255.255.11.135","255.255.111.35"]</p></blockquote><h1 id="问题分析">问题分析</h1><p>把字符串分解成符合规定的ip地址，首先要明白ip地址的性质</p><ul><li>ip地址分为四节，每节取值范围在[0,255]</li><li>对于取出的字符串，若它的第一位为’0’，那么它的长度只能为1，多位字符不能以0作为开头</li></ul><p>明白这两点，我们可以每次拿出[1,3]个字符，判断是否符合ip地址的条件，若符合，则递归剩下的字符串，直到四节都符合，那么就得到了一个解</p><h1 id="代码实现">代码实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data[MaxSize];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;IP;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addch</span><span class="params">(IP&amp;ip,<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ip.data[ip.length]=ch;</span><br><span class="line">    ip.length++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IP <span class="title">addot</span><span class="params">(IP ip)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    addch(ip,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solveip</span><span class="params">(<span class="keyword">char</span> s[],<span class="keyword">int</span> n,<span class="keyword">int</span> start,<span class="keyword">int</span> step,IP ip)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(start==n&amp;&amp;step==<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ip.length<span class="number">-1</span>;i++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,ip.data[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;n&amp;&amp;i&lt;start+<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num=<span class="number">10</span>*num+(s[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(num&lt;=<span class="number">255</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            addch(ip,s[i]);</span><br><span class="line">            solveip(s,n,i+<span class="number">1</span>,step+<span class="number">1</span>,addot(ip));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[MaxSize]=<span class="string">&quot;25525511135 &quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">11</span>;</span><br><span class="line">    IP ip;</span><br><span class="line">    ip.length=<span class="number">0</span>;</span><br><span class="line">    solveip(s,n,<span class="number">0</span>,<span class="number">0</span>,ip);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码分析">代码分析</h1><h2 id="算法">算法</h2><p>使用<strong>回溯算法</strong>，即每一次都按最优解向前搜索，不满足条件时则回溯到上一次的情况，进行次优解的搜索。</p><p>表现在本次代码中，最优解，就是每取一位字符，就按每一节的取值范围在[0,9]进行设置。若最优解不能满足，则回溯到上一个时间点，使用次优解进行搜索，而次优解即是取到两位字符，每一节按照取值范围[10,99]进行设置。若次优解仍不能满足，则回溯到上一个时间点，用最次解进行搜索，即取到三位字符，每一节按照取值范围[100,225]进行设置。</p><p>需要注意的是，其中的一节所选取的解的优劣，不会影响到下一节的选择，即下一节依然会使用最优解。 而且所谓回溯到上一个时间点，就是回溯到前一节的设置。</p><h2 id="核心模块">核心模块</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solveip</span><span class="params">(<span class="keyword">char</span> s[],<span class="keyword">int</span> n,<span class="keyword">int</span> start,<span class="keyword">int</span> step,IP ip)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(start==n&amp;&amp;step==<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ip.length<span class="number">-1</span>;i++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,ip.data[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;n&amp;&amp;i&lt;start+<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num=<span class="number">10</span>*num+(s[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(num&lt;=<span class="number">255</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            addch(ip,s[i]);</span><br><span class="line">            solveip(s,n,i+<span class="number">1</span>,step+<span class="number">1</span>,addot(ip));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="终止条件">终止条件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(start&lt;=n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(start==n&amp;&amp;step==<span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ip.length<span class="number">-1</span>;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,ip.data[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的终止条件有两个</p><ol type="1"><li>start==n，即字符串已经读取到最后一个</li><li>step==4，即节数刚好是四个</li></ol><p>注意这里的step，满足的终止条件是正好是四个，不论是过多还是过少都是不满足的。并且，过多的情况可以有效的限制从头开始数起的已经满足条件的含有三个字符的节不会被回溯掉，具体会在下面的执行过程中展示。</p><p>输出时，for循环的终止条件之所以设置为length-1，是为了避免输出ip串中最后储存的‘.’</p><p>而输出完成一个满足条件的ip串后，程序也不会停止，而是回溯到上一个时间点，去寻找其他形式的满足条件的串。 例如，在找到</p><blockquote><p>255.255.11.135</p></blockquote><p>之后，程序会回溯到</p><blockquote><p>255.255.11</p></blockquote><p>来继续查找，进而找到</p><blockquote><p>255.255.111.35</p></blockquote><p>直到再也找不出来，然后被调函数不断出栈，回到最开始调用的第一个solveip，结束。</p><h3 id="递归过程">递归过程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;n&amp;&amp;i&lt;start+<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    num=<span class="number">10</span>*num+(s[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(num&lt;=<span class="number">255</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        addch(ip,s[i]);</span><br><span class="line">        solveip(s,n,i+<span class="number">1</span>,step+<span class="number">1</span>,addot(ip));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的for循环以取到三个字符或是字符串被取完为终止条件 ，限制了每一节的最大长度。 同时两个if语句，限制了：</p><ul><li>每节取值范围在[0,255]</li><li>对于取出的字符串，若它的第一位为’0’，那么它的长度只能为1，多位字符不能以0作为开头</li></ul><p>addch函数将取到的字符填入ip串中。 addot函数将传入下一个solveip的IP串尾部加上‘.’，意味着下一个soveip中进行的是下一个字节的操作，当然，在回溯的过程中，无论是下一个字节中的操作，还是调用时加上的‘.’，都会被回溯掉。</p><p>在还没有进行回溯时，会不断的调用函数进栈，然后一个节都是最优解法，如</p><blockquote><p>2 2.2 2.2.5 ...... 2.2.5.2.2.5.1.1.1.3.5</p></blockquote><p>在调用下一次的时候</p><blockquote><p>2.2.5.2.2.5.1.1.1.3.5.</p></blockquote><p>就会出现问题，字符串被取完了，for循环无法进行，调用终止，函数出栈，回到上一个时间点</p><blockquote><p>2.2.5.2.2.5.1.1.1.3.5</p></blockquote><p>但是这时再进行下一次循环的时候，同样达到了终止条件，于是调用终止，函数出栈，回到上一个时间点</p><blockquote><p>2.2.5.2.2.5.1.1.1.3</p></blockquote><p>进行下一次for循环</p><blockquote><p>2.2.5.2.2.5.1.1.1.35</p></blockquote><p>依然不满足条件，回溯</p><blockquote><p>2.2.5.2.2.5.1.1.1 2.2.5.2.2.5.1.1.13 2.2.5.2.2.5.1.1.13.5</p></blockquote><p>如此不断的搜索与回溯，可以达到第一个被调用的函数</p><blockquote><p>2</p></blockquote><p>这时继续for循环</p><blockquote><p>22 22.5.2.2.5.1.1.1.3.5</p></blockquote><p>重复上述过程，可以达到第一节被满足的情况</p><blockquote><p>225 225.2.2.5.1.1.1.3.5</p></blockquote><p>如果继续回溯，会自然的想到，如果回溯到</p><blockquote><p>225</p></blockquote><p>那么继续进行第一个被调函数中的for循环的话，循环终止，函数结束，就无法完成。 其实，根本不会回溯到这种情况，因为第二节会在达到这种情况之前被满足，即回溯到</p><blockquote><p>225.22</p></blockquote><p>就会有</p><blockquote><p>225.225 225.225.1.1.1.3.5</p></blockquote><p>最终，达到终止条件</p><blockquote><p>225.225.11.135</p></blockquote><h1 id="总结">总结</h1><p>递归过程较为复杂，在搜索与回溯之间，函数不断地出栈入栈，因此时间复杂度会比较高。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题描述&quot;&gt;问题描述&lt;/h1&gt;
&lt;p&gt;给定一个只包含数字的字符串，用以表示一个 IP 地址，返回所有可能从 s 获得的 有效 IP 地址 。你可以按任何顺序返回答案。&lt;/p&gt;
&lt;p&gt;有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>BUUCTF Crypto WP</title>
    <link href="http://example.com/2021/04/26/BUUCTF-Crypto-WP/"/>
    <id>http://example.com/2021/04/26/BUUCTF-Crypto-WP/</id>
    <published>2021-04-26T14:50:02.000Z</published>
    <updated>2021-05-03T06:29:10.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="md5">MD5</h2><p>题目：e00cf25ad42683b3df678c61f42c6bda</p><p><strong>flag{admin1}</strong></p><p>MD5是输入不定长度信息，输出固定长度128-bits的算法。经过程序流程，生成四个32位数据，最后联合起来成为一个128-bits<a href="https://zh.wikipedia.org/wiki/散列">散列</a>。基本方式为，求余、取余、调整长度、与链接变量进行循环运算。得出结果。</p><figure><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/29bfebad4e7bdd4a2fc1210694eb5664262faecc" alt="F(X,Y,Z) = (X) ( )"><figcaption aria-hidden="true">F(X,Y,Z) = (X) ( )</figcaption></figure><figure><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/7068038702afd55190f991518f3a9188565f32d0" alt="G(X,Y,Z) = (X) (Y )"><figcaption aria-hidden="true">G(X,Y,Z) = (X) (Y )</figcaption></figure><figure><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/c121ed0510b6ad3ffde9b89cec96ff7552ae9236" alt="H(X,Y,Z) = X Y Z"><figcaption aria-hidden="true">H(X,Y,Z) = X Y Z</figcaption></figure><figure><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/2f119366de7d323f5e02b8d12a741968fa9d0f99" alt="I(X,Y,Z) = Y (X )"><figcaption aria-hidden="true">I(X,Y,Z) = Y (X )</figcaption></figure><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/ed39414f7a4720bbf82749a9fcd3ebb15220ea72" alt=", , , "> 是 <em>XOR</em>, <em>AND</em>, <em>OR</em> , <em>NOT</em> 的符号。</p><h2 id="password">password</h2><p>题目：姓名：张三 生日：19900315</p><p><strong>flag{zs19900315}</strong></p><p>可能是大多数人的密码都是姓名缩写加生日</p><h2 id="unencode">Unencode</h2><p>题目：</p><p><strong>flag{dsdasdsa99877LLLKK}</strong></p><p><em>Uuencode</em>将输入文本以每三个字节为单位进行编码，如果最后剩下的资料少于三个字节，不够的部份用零补齐。三个字节共有24个Bit，以6-bit为单位分为4个组，每个组以十进制来表示所出现的字节的数值。这个数值只会落在0到63之间。然后将每个数加上32，所产生的结果刚好落在ASCII字符集中可打印字符（32-空白…95-底线）的范围之中。</p><p><a href="http://blog.chacuo.net/753.html">uuencode编码算法</a></p><h2 id="url编码">URL编码</h2><p>题目：%66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d</p><p><strong>flag{and 1=1}</strong></p><p>这种编码是在特殊字符hex的基础上，在每个字符前置一个%。所以在编码和解码的过程中，<strong>只需要关注%，连带着%的三个字符对应着明文中的一个字符</strong>。</p><h2 id="摩斯">摩斯</h2><p>题目：… .-… — …- . -.-- — …-</p><p><strong>flag{ILOVEYOU}</strong></p><figure><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/%E5%9B%BD%E9%99%85%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81.svg/315px-%E5%9B%BD%E9%99%85%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81.svg.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><h2 id="一眼就解密">一眼就解密</h2><p>题目：ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=</p><p><strong>flag{THE_FLAG_OF_THIS_STRING}</strong></p><p>base64编码</p><p><strong>base三种编码的分辨方法</strong></p><p>首先看有没有符号，base64和base32都以’=‘作为空白补足符符号，如果结尾没有’='有可能是base16。如果出现了+和/，那么一定是base64。</p><p>然后看大小写字母，如果有大写有小写就一定是base64。如果全是大写的情况就看具体字母有没有F之后的字母出现，因为base16就是16进制，字母部分只到F。</p><p>当然这个base32的数字部分只有2-7，不过数字一般不好判断，所以这里不推荐用数字进行判断。</p><p>最后基本上就可以判断出来了，实在不行就拿去在线网站挨个方式解码，也不麻烦。</p><h2 id="看我回旋踢">看我回旋踢</h2><p>题目：synt{5pq1004q-86n5-46q8-o720-oro5on0417r1}</p><p><strong>flag{5cd1004d-86a5-46d8-b720-beb5ba0417e1}</strong></p><p>凯撒密码，密文中的synt是很典型的偏移量为13的凯撒密码</p><h2 id="变异凯撒">变异凯撒</h2><p>题目：加密密文：afZ_r9VYfScOeO_UL^RWUc 格式：flag{ }</p><p><strong>flag{Caesar_variation}</strong></p><p>先用普通凯撒做，结果为空</p><p>因为知道格式为<code>flag&#123;</code> 观察前四位，对应的偏移量为5、6、7、8、9，猜测每移动一位偏移量就加一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;afZ_r9VYfScOeO_UL^RWUc&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">offset = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">flag += <span class="built_in">str</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(i) + offset))</span><br><span class="line">offset += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span> (flag)</span><br></pre></td></tr></table></figure><h2 id="quoted-printable">Quoted-printable</h2><p>题目：=E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6</p><p><strong>flag{那你也很棒哦}</strong></p><p>hex编码</p><h2 id="rabbit">Rabbit</h2><p>题目：U2FsdGVkX1/+ydnDPowGbjjJXhZxm2MP2AgI</p><p><strong>flag{Cute_Rabbit}</strong></p><p>Rabbit 是一种高速流密码，于2003 年在FSE 研讨会上首次提出。 Rabbit 使用一个128 位密钥和一个64 位初始化向量。 该加密算法的核心组件是一个位流生成器，该流生成器每次迭代都会加密128 个消息位。 Rabbit 也是一种对称加密算法。</p><h2 id="篱笆墙的影子">篱笆墙的影子</h2><p>题目：felhaagv{ewtehtehfilnakgw}</p><p><strong>flag{wethinkwehavetheflag}</strong></p><p>栅栏密码</p><p>观察可以发现<code>felhaagv&#123;ewtehtehfilnakgw&#125;</code>，<code>f</code>和<code>l</code>的下标差为2，总字符数为26，所以密钥即栅栏的长度为13</p><h2 id="rsa">RSA</h2><p>题目：在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17 求解出d作为flga提交</p><p><strong>flag{125631357777427553}</strong></p><h2 id="丢失的md5">丢失的MD5</h2><p><strong>flag{e9032994dabac08080091151380478a2}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;md5&quot;&gt;MD5&lt;/h2&gt;
&lt;p&gt;题目：e00cf25ad42683b3df678c61f42c6bda&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;flag{admin1}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MD5是输入不定长度信息，输出固定长度128-bits的算法。经</summary>
      
    
    
    
    <category term="WP" scheme="http://example.com/categories/WP/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>CTF特训营</title>
    <link href="http://example.com/2021/04/24/CTF%E7%89%B9%E8%AE%AD%E8%90%A5/"/>
    <id>http://example.com/2021/04/24/CTF%E7%89%B9%E8%AE%AD%E8%90%A5/</id>
    <published>2021-04-23T16:45:39.000Z</published>
    <updated>2021-05-03T07:30:21.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第18章-crypto概述">第18章 Crypto概述</h2><p><strong>Crypto选手应有的能力</strong>：</p><ol type="1"><li>识别能力：识别出密码算法和编码算法</li><li>攻击能力：结合环境联想到特定算法的攻击方法</li><li>分析能力：对未知算法人工分析</li><li>编程能力：编程实现破解算法的程序，并认识到复杂度</li><li>学习能力：快速理解最新文献中的密码攻击并实现</li><li>跨领域能力：Crypto经常多领域结合出现，如Reverse、PWN、Web</li></ol><p><strong>密码学攻击</strong>：</p><ol type="1"><li><p>唯密文攻击</p></li><li><p>已知明文攻击</p></li><li><p>选择明文攻击</p></li><li><p>选择密文攻击</p></li></ol><h2 id="第19章-编码">第19章 编码</h2><p>编码（encode）是信息的另一种表达方式，可以解决一些传输问题。 将编码信息转化为原始信息，称之为解码（decode）。</p><h3 id="hex">19.1 hex</h3><p>hex编码就是根据每个字符的ASCII码进行<strong>16进制</strong>的转换。 <strong>一个字符经过编码变成了两个字符</strong>。 还可以作为将字符串转为十进制运算时的中转。</p><h3 id="urlencode">19.2 urlencode</h3><p>这种编码用于浏览器和网站之间的数据交换。可以解决一些特殊字符在传输过程中造成的问题。 这种编码是在特殊字符hex的基础上，在每个字符前置一个%。所以在编码和解码的过程中，<strong>只需要关注%，连带着%的三个字符对应着明文中的一个字符</strong>。</p><h3 id="morsecode">19.3 morsecode</h3><p>“.” 表示短音，“—” 表示长音，“/” 或”空格“表示分隔符。</p><figure><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/%E5%9B%BD%E9%99%85%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81.svg/315px-%E5%9B%BD%E9%99%85%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81.svg.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><h3 id="jsfuck">19.4 jsfuck</h3><p>仅用六个字符 <strong>()+[]!</strong> 就可以书写任意的JavaScript代码。</p><h3 id="uuencode">19.5 uuencode</h3><p>可以将二进制文件转换为可见字符文本的一种编码。 特征是<strong>范围从32到95，没有小写字母</strong>。</p><blockquote><p><strong>UUencode</strong>是一种二进制到文字的编码！</p><p>它不是MIME编码中一员。最早在unix 邮件系统中使用，全称：Unix-to-Unix encoding。它也是定义了用可打印字符表示二进制文字一种方法，并不是一种新的编码集合。</p><p>Uuencode将输入文本以每三个字节为单位进行编码，如果最后剩下的资料少于三个字节，不够的部份用零补齐。三个字节共有24个Bit，以6-bit为单位分为4个组，每个组以十进制来表示所出现的字节的数值。这个数值只会落在0到63之间。然后将每个数加上32，所产生的结果刚好落在ASCII字符集中可打印字符（32-空白…95-底线）的范围之中。</p><p>跟Base64具有非常多的类似，也做了一些特殊转码说明！因为对所有文本都会编码一次可读性不是很好！！</p></blockquote><p><a href="http://blog.chacuo.net/753.html">uuencode编码算法</a></p><h3 id="base家族">19.6 base家族</h3><p>主要功能是将特殊字符和不可见字符转换为常见字符。 hex编码其实就是base16编码。因为hex是用字符ASCII码的十六进制表示，即用16个字符表示256个字符，所以叫base16。 同理，base32和base64就是用32、64个字符表示256个字符。</p><p>base64： <img src="https://img-blog.csdnimg.cn/20200602074159877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21hc3Rlcmd1Mg==,size_16,color_FFFFFF,t_70" alt="base64索引表"> base32： <img src="https://img-blog.csdnimg.cn/20200602074337747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21hc3Rlcmd1Mg==,size_16,color_FFFFFF,t_70" alt="base32索引表"> base16： <img src="https://img-blog.csdnimg.cn/20200602074410371.png" alt="base16索引表"></p><h2 id="第二十章-古典密码">第二十章 古典密码</h2><p><strong>移位密码</strong>和<strong>替代密码</strong></p><p>在讲解密码学的过程中，一般使用<strong>m代表明文，c代表密文</strong></p><p>密码和编码最大的区别在于一个关键信息：<strong>密钥</strong></p><h3 id="移位密码">20.1 移位密码</h3><h4 id="简单移位密码">20.1.1 简单移位密码</h4><p>明文根据密钥进行了位置的变换</p><p>攻击方法有<strong>爆破</strong>和<strong>语义分析</strong></p><h4 id="区路密码">20.1.2 区路密码</h4><p>将明文填入一个表中，并按照一定的曲路遍历</p><h4 id="云影密码">20.1.3 云影密码</h4><p>有1，2，4，8这四个数字，可以通过加法来用这四个数字表示0-9中的任何一个数字，例如0=2+8，同理7=1+2+4， 9=1+8。这样之后再用1-26来表示26个英文字母，就有了密文与明文之间的对应关系。引入0来作为间隔，以免出现混乱。所以云影密码又叫“01248密码”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">de_code</span>(<span class="params">c</span>):</span></span><br><span class="line">    dic = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>), <span class="built_in">ord</span>(<span class="string">&quot;Z&quot;</span>) + <span class="number">1</span>)]</span><br><span class="line">    flag = []</span><br><span class="line">    c2 = [i <span class="keyword">for</span> i <span class="keyword">in</span> c.split(<span class="string">&quot;0&quot;</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> c2:</span><br><span class="line">        c3 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">            c3 += <span class="built_in">int</span>(j)</span><br><span class="line">        flag.append(dic[c3 - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">plaintext</span>):</span></span><br><span class="line">    dic = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&quot;A&quot;</span>), <span class="built_in">ord</span>(<span class="string">&quot;Z&quot;</span>) + <span class="number">1</span>)]</span><br><span class="line">    m = [i <span class="keyword">for</span> i <span class="keyword">in</span> plaintext]</span><br><span class="line">    tmp = [];flag = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line">            <span class="keyword">if</span> m[i] == dic[j]:</span><br><span class="line">                tmp.append(j + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">        res = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">8</span>:</span><br><span class="line">            res += <span class="built_in">int</span>(i/<span class="number">8</span>)*<span class="string">&quot;8&quot;</span></span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">8</span> &gt;=<span class="number">4</span>:</span><br><span class="line">            res += <span class="built_in">int</span>(i%<span class="number">8</span>/<span class="number">4</span>)*<span class="string">&quot;4&quot;</span></span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">4</span> &gt;=<span class="number">2</span>:</span><br><span class="line">            res += <span class="built_in">int</span>(i%<span class="number">4</span>/<span class="number">2</span>)*<span class="string">&quot;2&quot;</span></span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span> &gt;= <span class="number">1</span>:</span><br><span class="line">            res += <span class="built_in">int</span>(i%<span class="number">2</span>/<span class="number">1</span>)*<span class="string">&quot;1&quot;</span></span><br><span class="line">        flag.append(res + <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;&quot;</span>.join(flag)[:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">input</span>(<span class="string">&quot;输入要解密的数字串:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (de_code(c))</span><br><span class="line">m_code = <span class="built_in">input</span>(<span class="string">&quot;请输入要加密的数字串:&quot;</span>)</span><br><span class="line">encode(m_code)</span><br></pre></td></tr></table></figure><h4 id="栅栏密码">20.1.4 栅栏密码</h4><p>密钥为栅栏的长度k，顺数k个字符为一组，取每一组的第一个字符组成字符串，取完一轮后再取每组的第二个，以此类推。</p><p>观察的方法是，如果flag是特征，那么密文中<code>f</code>和<code>l</code>的下标差为m，总字符数为n，所以<strong>密钥</strong>即栅栏的长度为<strong>n/m</strong></p><h3 id="替代密码">20.2 替代密码</h3><p>最有效的攻击方法是<strong>词频攻击</strong></p><h4 id="单表替代密码">20.2.1 单表替代密码</h4><h5 id="凯撒密码">1.凯撒密码</h5><p>将所有数字偏移一定的位数，生成密文</p><p>最简单的攻击方法是<strong>直接爆破</strong>，将所有移位方式全部生成然后关键词匹配或者肉眼观察</p><h5 id="rot13">2.ROT13</h5><p>是凯撒密码的一种特例，即移位13.</p><p>经常用于MD5和flag等字符串上，MD5由于只有“ABCDEF”六个字符，加密后变为“<strong>NOPQRS</strong>”，flag则变成“<strong>synt</strong>”</p><h5 id="埃特巴什码">3.埃特巴什码</h5><p>埃特巴什码是一种固定密钥的替换密码，其明文字母表与密文字母表正好相反，即所有的A都会被替换成Z，所有的B都会被替换成Y，依次类推。</p><p><strong>埃特巴什码没有安全性可言，因为它的密钥是固定的。</strong></p><figure><img src="http://cryptowikis.com/ClassicalCipher/SubstitutionCiphers/image/AtbashCipher-1.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><h5 id="经典单表替代密码">4.经典单表替代密码</h5><p>上述几种都是单表替代密码的特例。</p><p>经典单表替代密码，就是其统称，普遍意义上的<strong>用一个替代表对每一个位置的字符进行查表替换</strong>。</p><h5 id="培根密码">5.培根密码</h5><p>五个一组，用两个不同的字体表示密文。</p><figure><img src="https://img.chainnews.com/material/images/ed5fdc0e40eb3f79330ae288ca9d3dea.jpg-article" alt="密码学基础：古典密码学（一）｜ 观点- 链闻ChainNews"><figcaption aria-hidden="true">密码学基础：古典密码学（一）｜ 观点- 链闻ChainNews</figcaption></figure><h5 id="图形替代密码">6.图形替代密码</h5><p>如猪圈密码和跳舞的小人</p><h5 id="仿射密码">7.仿射密码</h5><p>$ c=Am+B mod n$ 其中，<strong>（a,b）</strong>为密钥</p><h4 id="多表替代密码">20.2.2 多表替代密码</h4><h5 id="棋盘类密码">1.棋盘类密码</h5><table><thead><tr class="header"><th></th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr class="odd"><td>1</td><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td></tr><tr class="even"><td>2</td><td>F</td><td>G</td><td>H</td><td>I/J</td><td>K</td></tr><tr class="odd"><td>3</td><td>L</td><td>M</td><td>N</td><td>O</td><td>P</td></tr><tr class="even"><td>4</td><td>Q</td><td>R</td><td>S</td><td>T</td><td>U</td></tr><tr class="odd"><td>5</td><td>V</td><td>W</td><td>X</td><td>Y</td><td>Z</td></tr></tbody></table><h5 id="维吉尼亚密码">2.维吉尼亚密码</h5><p>维吉尼亚密码是一种简单的多表代换密码(由26个类似的Caesar密码的代换表组成)，</p><p>即由<strong>一些</strong>偏移量不同的恺撒密码组成，这些代换在一起组成了密钥。</p><p>明文的第一个字母按照密钥的第一个字母进行加密，明文的第二个字母按照密钥的第二个字母进行加密，以此类推。密钥字母数量不够可循环使用。</p><p>例如，假设明文为： <img src="https://www.zhihu.com/equation?tex=ILOVEMIMAXUE" alt="[公式]"> ，密钥为： <img src="https://www.zhihu.com/equation?tex=AWSL" alt="[公式]"></p><p>则密文为： <img src="https://www.zhihu.com/equation?tex=IHGGEIAXATMP" alt="[公式]"> 。</p><p>（密钥若长度不够可以继续重复，例如 <img src="https://www.zhihu.com/equation?tex=AWSLAWSLAWSL" alt="[公式]"> ）</p><p>解密方式与加密正好相反，通过图1可以进行解密。</p><p>再例如，假设密文为： <img src="https://www.zhihu.com/equation?tex=FYXTNFXDM" alt="[公式]"> ，密钥为： <img src="https://www.zhihu.com/equation?tex=TQL" alt="[公式]"></p><p>则解密得到的明文为： <img src="https://www.zhihu.com/equation?tex=MIMAXUENB" alt="[公式]"> 。</p><h2 id="第21章-现代密码">第21章 现代密码</h2><h3 id="公钥密码">21.2 公钥密码</h3><p>一个密码体制中的<strong>加密密钥和解密密钥不同</strong>，其中<strong>加密密钥是公开的解密密钥是保密的</strong>，且由<strong>加密密钥很难推算出解密密钥</strong>。</p><p>所有的公钥算法都是基于某个<strong>困难的数学问题</strong>而产生的。</p><h4 id="rsa基础">21.2.1 RSA基础</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第18章-crypto概述&quot;&gt;第18章 Crypto概述&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Crypto选手应有的能力&lt;/strong&gt;：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;识别能力：识别出密码算法和编码算法&lt;/li&gt;
&lt;li&gt;攻击能力：结合环境联</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://example.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="http://example.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/04/21/hello-world/"/>
    <id>http://example.com/2021/04/21/hello-world/</id>
    <published>2021-04-20T17:24:31.184Z</published>
    <updated>2021-04-20T17:24:31.185Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
